k
is.na(k[1]$target)
na.omit(k)
k<-na.omit(k)
k
is.na(k[1]$target)
!is.na(k[1]$target)
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
etext <- "cant wait to see"
sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', etext)
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
etext <- "aaa"
sub(".* ", "", etext)
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
suggestWord("you have a wonderfull day",dt_n1,dt_n2,dt_n3, dt_n4)
dt_n4
dt_n4 <- readRDS("dt_n4.RDS")
setwd("C:\\git\\capstone\\TextPredictionApp")
dt_n4 <- readRDS("dt_n4.RDS")
dt_n4
suggestWord("you have a wonderfull day",dt_n1,dt_n2,dt_n3, dt_n4)
suggestWord("wonderfull day",dt_n1,dt_n2,dt_n3, dt_n4)
suggestWord("you have a wonderfull day",dt_n1,dt_n2,dt_n3, dt_n4)
suggestWord <- function(etext,dt_n1,dt_n2,dt_n3,dt_n4)
{
etext <- tolower(etext)
etext <- trim(etext)
nWords<-str_count(etext, "\\S+")
if (nWords == 0){
v<-dt_n1[][order(-freq)]
}else if (nWords == 1){
v<-dt_n2[gram==etext][order(-freq)]
} else if (nWords==2){
v<- dt_n3[gram==etext][order(-freq)]
} else if (nWords==3){
v<- dt_n4[gram==etext][order(-freq)]
} else{ #more than 3 words
#w<- c(word(etext,nWords-1), " ", word(etext,nWords)) #"the best way" becomes "best way" so I can look for it on the dt_n3
w<- sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', etext) # "cant wait to see" becomes "wait to see"
w<-paste(w, collapse = '')
w<-trim(w)
v<- dt_n4[gram==w][order(-freq)]
}
if (nWords>=1 && is.na(v[1]$target)){ #couldnt find n gram, recursion to get n-1 gram
if (nWords ==1){
etext <-""
} else{
etext <- sub(".* ", "", etext)
}
v <- suggestWord(etext, dt_n1, dt_n2, dt_n3)
}
return(v[1:10,])
}
suggestWord("you have a wonderfull day",dt_n1,dt_n2,dt_n3, dt_n4)
etext <- "you have a wonderfull day"
etext <- tolower(etext)
etext <- trim(etext)
nWords<-str_count(etext, "\\S+")
nWords
sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', etext)
w<- sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', etext) # "cant wait to see" becomes "wait to see"
w<-paste(w, collapse = '')
w<-trim(w)
w
dt_n4[gram==w][order(-freq)]
w
dt_n4
sub(".* ", "", etext)
sub(".* ", "", etext)
sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', etext)
sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', etext)
sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', etext)
sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', "um dois tres quatro")
sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', "um dois tres")
sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', "um dois")
sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', "um dois tres quatro")
sub( patt='(.+)(([ ,.]+\\w+){2})[ ]?$', repl='\\2', "um dois tres quatro")
sub( patt='(.+)(([ ,.]+\\w+){2})[ ]?$', repl='\\2', "um dois")
sub( patt='(.+)(([ ,.]+\\w+){1})[ ]?$', repl='\\2', "um dois")
etext
etext<-"um dois"
etext <- sub( patt='(.+)(([ ,.]+\\w+){1})[ ]?$', repl='\\2', etext)
etext
etext<-"um dois tres"
sub( patt='(.+)(([ ,.]+\\w+){2})[ ]?$', repl='\\2', etext)
etext<-"um dois tres quatro"
sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', etext)
etext<-"a a a sdfdsf um dois tres quatro"
sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', etext)
suggestWord <- function(etext,dt_n1,dt_n2,dt_n3,dt_n4)
{
etext <- tolower(etext)
etext <- trim(etext)
nWords<-str_count(etext, "\\S+")
if (nWords == 0){
v<-dt_n1[][order(-freq)]
}else if (nWords == 1){
v<-dt_n2[gram==etext][order(-freq)]
} else if (nWords==2){
v<- dt_n3[gram==etext][order(-freq)]
} else if (nWords==3){
v<- dt_n4[gram==etext][order(-freq)]
} else{ #more than 3 words
#w<- c(word(etext,nWords-1), " ", word(etext,nWords)) #"the best way" becomes "best way" so I can look for it on the dt_n3
w<- sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', etext) # "cant wait to see" becomes "wait to see"
w<-paste(w, collapse = '')
w<-trim(w)
v<- dt_n4[gram==w][order(-freq)]
}
if (nWords>=1 && is.na(v[1]$target)){ #couldnt find n gram, recursion to get n-1 gram
if (nWords ==1){ etext <-""}
else if (nWords ==2) { etext <- sub( patt='(.+)(([ ,.]+\\w+){1})[ ]?$', repl='\\2', etext)}
else if (nWords ==3) { etext <- sub( patt='(.+)(([ ,.]+\\w+){2})[ ]?$', repl='\\2', etext)}
else if (nWords >=4) { etext <- sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', etext)}
v <- suggestWord(etext, dt_n1, dt_n2, dt_n3)
}
return(v[1:10,])
}
suggestWord("you have a wonderfull day",dt_n1,dt_n2,dt_n3, dt_n4)
dt_n4
suggestWord <- function(etext,dt_n1,dt_n2,dt_n3,dt_n4)
{
etext <- tolower(etext)
etext <- trim(etext)
nWords<-str_count(etext, "\\S+")
if (nWords == 0){
v<-dt_n1[][order(-freq)]
}else if (nWords == 1){
v<-dt_n2[gram==etext][order(-freq)]
} else if (nWords==2){
v<- dt_n3[gram==etext][order(-freq)]
} else if (nWords==3){
v<- dt_n4[gram==etext][order(-freq)]
} else{ #more than 3 words
#w<- c(word(etext,nWords-1), " ", word(etext,nWords)) #"the best way" becomes "best way" so I can look for it on the dt_n3
w<- sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', etext) # "cant wait to see" becomes "wait to see"
w<-paste(w, collapse = '')
w<-trim(w)
v<- dt_n4[gram==w][order(-freq)]
}
if (nWords>=1 && is.na(v[1]$target)){ #couldnt find n gram, recursion to get n-1 gram
if (nWords ==1){ etext <-""}
else if (nWords ==2) { etext <- sub( patt='(.+)(([ ,.]+\\w+){1})[ ]?$', repl='\\2', etext)}
else if (nWords ==3) { etext <- sub( patt='(.+)(([ ,.]+\\w+){2})[ ]?$', repl='\\2', etext)}
else if (nWords >=4) { etext <- sub( patt='(.+)(([ ,.]+\\w+){3})[ ]?$', repl='\\2', etext)}
v <- suggestWord(etext, dt_n1, dt_n2, dt_n3, dt_n4)
}
return(v[1:10,])
}
suggestWord("you have a wonderfull day",dt_n1,dt_n2,dt_n3, dt_n4)
shiny::runApp()
dt_n4[][order(-freq)]
shiny::runApp()
shiny::runApp()
library(foreach)
cl <- makePSOCKcluster()
?makePSOCKcluster
options(cores=8)
options(cores=2)
registerDoParallel(2)
?registerDoParallel
library(foreach)
foreach(i=1:3) %do% sqrt(i)
=rep(10, 3)
rep(10, 3)
rnorm(4)
Sys.sleep(3)
runif(500)
?runif
gl(2, 50)
?gl
gl(2, 10)
gl(2, 10)
gl(3, 10)
x <- matrix(runif(500), 100)
y <- gl(2, 50)
library(randomForest)
rf <- foreach(ntree=rep(250, 4), .combine=combine) %do%
randomForest(x, y, ntree=ntree)
rf
rm(list = ls())
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
blog_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.blogs.txt"
news_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.news.txt"
con <- file("c:\\git\\capstone\\final\\en_US\\en_US.twitter.txt", "r")
con <- file("c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt", "r")
nrows =5
a<- readLines(con,nrows)
a
class(a)
a <- iconv(a, from="UTF-8", to="latin1", sub=" ")
data.table(a)
data.fram(a)
data.frame(a)
df<-data.table(a)
names(df) <- c("text")
df<-data.table(a)
df
names(df) <- c("text")
?setnames
setnames(df,"a","text")
df<-data.table(a)
setnames(df,"a","text")
df
myCorpus <-Corpus(VectorSource(df))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, removePunctuation) # remove punctuation
myCorpus <- tm_map(myCorpus, removeNumbers) #remove numbers
removeURL <- function(x) gsub("http[[:alnum:]]*", "", x) # remove URLs
myCorpus <- tm_map(myCorpus, removeURL)
myCorpus <- tm_map(myCorpus, PlainTextDocument) #http://stackoverflow.com/questions/24191728/documenttermmatrix-error-on-corpus-argument
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = minGram, max = maxGram))
tdm <- TermDocumentMatrix(myCorpus, control = list(tokenize = BigramTokenizer))
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 1, max = 1))
tdm <- TermDocumentMatrix(myCorpus, control = list(tokenize = BigramTokenizer))
term.freq <- rowSums(as.matrix(tdm))
term.freq
df <- data.table(term = names(term.freq), freq = term.freq) #WORD COUNT
df
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
blog_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.blogs.txt"
news_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.news.txt"
setwd("C:\\git\\capstone\\1BuildModel")
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
blog_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.blogs.txt"
news_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.news.txt"
df3 <- buildNGram(news_en, 1,1,1)
df3
df1 <- buildNGram(twitter_en, 1,1,1)
df2 <- buildNGram(blog_en, 1,1,1)
df3 <- buildNGram(news_en, 1,1,1)
df1
df_n1 <- rbind(df1,rbind(df2,df3))
class(df_n1)
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
df_n1
rownames(df_n1) <- NULL
df_n1
aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
df1 <- buildNGram(twitter_en, 1,1,1)
df2 <- buildNGram(blog_en, 1,1,1)
df3 <- buildNGram(news_en, 1,1,1)
df_n1 <- rbind(df1,rbind(df2,df3))
rownames(df_n1) <- NULL
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
rm(list = ls())
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
blog_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.blogs.txt"
news_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.news.txt"
df1 <- buildNGram(twitter_en, 1,1,1)
df2 <- buildNGram(blog_en, 1,1,1)
df3 <- buildNGram(news_en, 1,1,1)
df_n1 <- rbind(df1,rbind(df2,df3))
rownames(df_n1) <- NULL
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
df1 <- buildNGram(twitter_en, 1,1,1)
df2 <- buildNGram(blog_en, 1,1,1)
df3 <- buildNGram(news_en, 1,1,1)
df_n1 <- rbind(df1,rbind(df2,df3))
rownames(df_n1) <- NULL
df_n1
df3
rownames(df_n1) <- NULL
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
names(df_n1) <- c("target", "freq")
dt_n1 <-data.table(df_n1)
dt_n1
class(df1)
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 1,1,1)
df2 <- buildNGram(blog_en, 1,1,1)
df3 <- buildNGram(news_en, 1,1,1)
end <- Sys.time()
end-begin
df_n1 <- rbind(df1,rbind(df2,df3))
rownames(df_n1) <- NULL
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
names(df_n1) <- c("target", "freq")
dt_n1 <-data.table(df_n1)
rm(list = ls())
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
blog_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.blogs.txt"
news_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.news.txt"
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 1,1,1)
df2 <- buildNGram(blog_en, 1,1,1)
df3 <- buildNGram(news_en, 100000,1,1)
end <- Sys.time()
end-begin
df_n1 <- rbind(df1,rbind(df2,df3))
rownames(df_n1) <- NULL
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
names(df_n1) <- c("target", "freq")
dt_n1 <-data.table(df_n1)
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 1,2,2)
df2 <- buildNGram(blog_en, 1,2,2)
df3 <- buildNGram(news_en, 100000,2,2)
end <- Sys.time()
end-begin
df_n2 <- rbind(df1,rbind(df2,df3))
rownames(df_n2) <- NULL
df_n2<-aggregate(df_n2[,c("freq")],by=list(df_n2$term),FUN=sum)
names(df_n2) <- c("term", "freq")
rexp <- "^(\\w+)\\s?(.*)$"
df_n2<-data.frame(gram=sub(rexp,"\\1",df_n2$term), target=sub(rexp,"\\2",df_n2$term), freq = df_n2$freq)
dt_n2 <-data.table(df_n2)
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 1,3,3)
df2 <- buildNGram(blog_en, 1,3,3)
df3 <- buildNGram(news_en, 100000,3,3)
end <- Sys.time()
end-begin
df_n3 <- rbind(df1,rbind(df2,df3))
rownames(df_n3) <- NULL
df_n3<-aggregate(df_n3[,c("freq")],by=list(df_n3$term),FUN=sum)
names(df_n3) <- c("term", "freq")
dt_n3 <-data.table(df_n3)
dt_n3<-data.table(  gram = sub(" [^ ]*$", "", dt_n3$term), target = sub(".* ", "", dt_n3$term), freq=dt_n3$freq )
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 1,4,4)
df2 <- buildNGram(blog_en, 1,4,4)
df3 <- buildNGram(news_en, 100000,4,4)
end <- Sys.time()
end-begin
df_n4 <- rbind(df1,rbind(df2,df3))
rownames(df_n4) <- NULL
df_n4<-aggregate(df_n4[,c("freq")],by=list(df_n4$term),FUN=sum)
names(df_n4) <- c("term", "freq")
dt_n4 <-data.table(df_n4)
dt_n4<-data.table(  gram = sub(" [^ ]*$", "", dt_n4$term), target = sub(".* ", "", dt_n4$term), freq=dt_n4$freq )
saveRDS(dt_n1,"N_dt_n1.RDS")
saveRDS(dt_n2,"N_dt_n2.RDS")
saveRDS(dt_n3,"N_dt_n3.RDS")
saveRDS(dtdt_n4[freq>1]_n4,"N_dt_n4.RDS")
saveRDS(dt_n4[freq>1]_n4,"N_dt_n4.RDS")
saveRDS(dt_n4[freq>1],"N_dt_n4.RDS")
dt_n3
dt_n3[freq>1]
saveRDS(dt_n3[freq>1],"N_dt_n3.RDS")
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
rm(list = ls())
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
blog_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.blogs.txt"
news_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.news.txt"
df1 <- buildNGram(twitter_en, 200000,1,1)
df2 <- buildNGram(blog_en, 200000,1,1)
rm(list = ls())
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 100000,1,1)
df2 <- buildNGram(blog_en, 100000,1,1)
df3 <- buildNGram(news_en, 100000,1,1)
end <- Sys.time()
end-begin
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 100000,1,1)
df2 <- buildNGram(blog_en, 100000,1,1)
df3 <- buildNGram(news_en, 100000,1,1)
end <- Sys.time()
end-begin
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
blog_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.blogs.txt"
news_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.news.txt"
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 100000,1,1)
df2 <- buildNGram(blog_en, 100000,1,1)
df3 <- buildNGram(news_en, 100000,1,1)
end <- Sys.time()
end-begin
df_n1 <- rbind(df1,rbind(df2,df3))
rm(df1) rm(df2) rm(df3)
rm(df1); rm(df2); rm(df3);
rownames(df_n1) <- NULL
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
names(df_n1) <- c("target", "freq")
dt_n1 <-data.table(df_n1)
dt_n1 <-data.table(df_n1); rm(df_n1);
rm(list = ls())
libs <- c("tm","ggplot2", "graph", "Rgraphviz", "wordcloud","twitteR","RWeka","dplyr", "data.table")
lapply(libs, require, character.only = TRUE)
source('buildNGram.R')
ModelBuilder(1, 1, 1)
source('ModelBuilder')
setwd("C:\\git\\capstone\\1BuildModel")
source('ModelBuilder')
source('ModelBuilder.R')
source('ModelBuilder.R')
ModelBuilder(1, 1, 1)
ModelBuilder(1, 2, 2)
ModelBuilder(1, 3, 3)
n1 <- ModelBuilder(10, 1, 1)
n2 <- ModelBuilder(10, 1, 1)
n3 <- ModelBuilder(10, 1, 1)
n4 <- ModelBuilder(10, 1, 1)
n1 <- ModelBuilder(10, 1, 1)
n2 <- ModelBuilder(10, 2, 2)
n3 <- ModelBuilder(10, 3, 3)
n4 <- ModelBuilder(10, 4, 4)
n
n4
n2
n3
data.table(  gram = sub(" [^ ]*$", "", n3$term), target = sub(".* ", "", n3$term), freq=n3$freq )
data.table(  gram = sub(" [^ ]*$", "", n4$term), target = sub(".* ", "", n4$term), freq=n4$freq )
rexp <- "^(\\w+)\\s?(.*)$"
df_n2<-n2
data.frame(gram=sub(rexp,"\\1",df_n2$term), target=sub(rexp,"\\2",df_n2$term), freq = df_n2$freq)
data.frame(gram=sub(rexp,"\\1",df_n2$target), target=sub(rexp,"\\2",df_n2$target), freq = df_n2$freq)
data.table(  gram = sub(" [^ ]*$", "", n4$target), target = sub(".* ", "", n4$target), freq=n4$freq )
ModelBuilder<- function(nrows, minGram, maxGram)
{
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
blog_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.blogs.txt"
news_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.news.txt"
begin <- Sys.time()
df1 <- buildNGram(twitter_en, nrows,minGram,maxGram)
df2 <- buildNGram(blog_en, nrows,minGram,maxGram)
df3 <- buildNGram(news_en, nrows,minGram,maxGram)
end <- Sys.time()
end-begin
df_n1 <- rbind(df1,rbind(df2,df3))
rm(df1); rm(df2); rm(df3);
rownames(df_n1) <- NULL
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum) #same gram can appear on different files
names(df_n1) <- c("target", "freq")
if(minGram == 1) {
dt_n1 <-data.table(df_n1); rm(df_n1);
} else {
dt_n1 <-data.table(df_n3)
dt_n1<-data.table(  gram = sub(" [^ ]*$", "", dt_n1$term), target = sub(".* ", "", dt_n1$term), freq=dt_n1$freq )
}
return(dt_n1)
}
n2 <- ModelBuilder(10, 2, 2)
source('ModelBuilder.R')
n3 <- ModelBuilder(10, 3, 3)
source('ModelBuilder.R')
n3 <- ModelBuilder(10, 3, 3)
n3
n1 <- ModelBuilder(10, 1, 1)
n2 <- ModelBuilder(10, 2, 2)
n3 <- ModelBuilder(10, 3, 3)
n4 <- ModelBuilder(10, 4, 4)
n1
n2
n3
n4
rm(list = ls())
source('buildNGram.R')
source('ModelBuilder.R')
n1 <- ModelBuilder(10, 1, 1)
rm(list = ls())
libs <- c("tm","ggplot2", "graph", "Rgraphviz", "wordcloud","twitteR","RWeka","dplyr", "data.table")
lapply(libs, require, character.only = TRUE)
source('buildNGram.R')
source('ModelBuilder.R')
n1 <- ModelBuilder(1000, 1, 1)
n2 <- ModelBuilder(1000, 2, 2)
n3 <- ModelBuilder(1000, 3, 3)
n4 <- ModelBuilder(1000, 4, 4)
saveRDS(n1,"n1.RDS")
saveRDS(n2,"n2.RDS")
saveRDS(n3[freq>1],"n3.RDS")
saveRDS(n4[freq>1],"n4.RDS")
rm(list = ls())
libs <- c("tm","ggplot2", "graph", "Rgraphviz", "wordcloud","twitteR","RWeka","dplyr", "data.table")
lapply(libs, require, character.only = TRUE)
source('buildNGram.R')
source('ModelBuilder.R')
n1 <- ModelBuilder(1000, 1, 1)
n2 <- ModelBuilder(1000, 2, 2)
n3 <- ModelBuilder(1000, 3, 3)
n4 <- ModelBuilder(1000, 4, 4)
saveRDS(n1,"n1.RDS")
saveRDS(n2,"n2.RDS")
saveRDS(n3[freq>1],"n3.RDS")
saveRDS(n4[freq>1],"n4.RDS")
n1
n2
n3
n4
shiny::runApp('C:/git/capstone/TextPredictionApp')
