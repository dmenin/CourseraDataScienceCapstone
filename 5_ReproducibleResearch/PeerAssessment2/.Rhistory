filter(compare, day_sum != new_day_mean)
View(compare)
filter(compare, is.na(day_sum) )
head(newdata)
newdata$foo <- !(weekdays(as.Date(date)) %in% c('Saturday','Sunday'))
newdata$foo <- !(weekdays(date) %in% c('Saturday','Sunday'))
newdata$foo <- isweekend(date)
newdata$foo <- isWeekday(date)
newdata$foo <- isWeekday(date)
?isWeekday
??isWeekday
?weekdays
newdata$foo <- weekdays(newdata$date)
head(newdata)
newdata$foo <- (weekdays(newdata$date) %in% c('Saturday','Sunday'))
head(newdata)
newdata$foo <- (if (weekdays(newdata$date) %in% c('Saturday','Sunday')) then 'a' else 'b' )
newdata$foo <- ifelse( (weekdays(newdata$date) %in% c('Saturday','Sunday')), 'a', 'b' )
head(newdata)
newdata$foo <- ifelse( (weekdays(newdata$date) %in% c('Saturday','Sunday')), 'Weekend', 'Weekday' )
head(newdata)
newdata$isweekday <- ifelse( (weekdays(newdata$date) %in% c('Saturday','Sunday')), 'Weekend', 'Weekday' )
newdata <- subset(newdata, select -c(foo))
newdata <- subset(newdata, select = -c(foo))
head(newdata)
filter(compare, is.na(day_sum) )
ggplot(summary_newdate, aes(x=new_day_sum)) + geom_histogram(binwidth=3021, colour="black", fill="green") + ggtitle("Histogram of total number of steps taken each day")
ggplot(data=byinterval, aes(x=interval, y=steps_avg)) + geom_line() + geom_point() + ggtitle("Average number of steps by interval") + ylab("Number of steps")
ggplot(data=byinterval, aes(x=interval, y=steps_avg)) + geom_line() + geom_point() + ggtitle("Average number of steps by interval") + ylab("Number of steps")
head(newdata)
ddply(newdata, 'interval',summarise, steps_avg = mean(steps, na.rm = TRUE))
View(newdata)
ddply(newdata, c('interval','isweekday'),summarise, steps_avg = mean(steps, na.rm = TRUE))
newdatagroup <- ddply(newdata, c('interval','isweekday'),summarise, steps_avg = mean(steps, na.rm = TRUE))
View(newdatagroup)
ggplot(data=newdatagroup, aes(x=interval, y=steps_avg)) + geom_line() + geom_point() + ggtitle("Average number of steps by interval") + ylab("Number of steps")
ggplot(data=newdatagroup, aes(x=interval, y=steps_avg)) + geom_line() + geom_point() + ggtitle("Average number of steps by interval") + ylab("Number of steps") + facet_grid(isweekday ~ .) +
()
ggplot(data=newdatagroup, aes(x=interval, y=steps_avg)) + geom_line() + geom_point() + ggtitle("Average number of steps by interval") + ylab("Number of steps") + facet_grid(isweekday ~ .)
1)
library(reshape)
ggplot(summarydate_no_nas, aes(x=day_sum)) + geom_histogram(binwidth=3021, colour="black", fill="light blue") + ggtitle("Histogram of total
)
)
ggplot(summarydate_no_nas, aes(x=day_sum)) + geom_histogram(binwidth=3021, colour="black", fill="light blue") + ggtitle("Histogram of total number of steps taken each day")
ggplot(summarydate_no_nas, aes(x=day_sum)) + geom_histogram(binwidth=16, colour="black", fill="light blue") + ggtitle("Histogram of total number of steps taken each day")
ggplot(summarydate_no_nas, aes(x=day_sum)) + geom_histogram(binwidth=1000, colour="black", fill="light blue") + ggtitle("Histogram of total number of steps taken each day")
ggplot(summarydate_no_nas, aes(x=day_sum)) + geom_histogram(binwidth=1000, colour="black", fill="light blue") + ggtitle("Histogram of total number of steps taken each day")
ggplot(summarydate_no_nas, aes(x=day_sum)) + geom_histogram(binwidth=2000, colour="black", fill="light blue") + ggtitle("Histogram of total number of steps taken each day")
knit2html()
library(knitr)
knit2html()
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
pnorm(-0.7)
pnorm(-1)
?pnorm
pnorm(-2)
pnorm(-3)
pnorm(-1)
pnorm(70, mena=80, sd= 10)
pnorm(70, mean=80, sd= 10)
pnorm(80, mean=80, sd= 10)
pnorm(100, mean=100, sd= 10)
pnorm(100)
pnorm(1)
pnorm(0)
pois(10, lambda = 5 * 3).
pois(10, lambda = 5 * 3)
ppois(10, lambda = 5 * 3)
qnorm(0.95, mean = 110, sd = 75)
qnorm(0.95, mean = 1100, sd = 75)
pnorm(0.95, mean = 1100, sd=75)
pnorm(1223, mean = 1100, sd=75)
setwd("c:\\git\\RepData_PeerAssessment2\\")
ggplot(summary_bydmg, aes(x=evtype, y=dmg_sum, fill=evtype)) +
ggtitle("Events with the greatest economic consequences") +
geom_bar(stat="identity", color='black') +
guides(fill=guide_legend(override.aes=list(colour=NA))) +
coord_polar(theta='x') + xlab("") + ylab("")  +  theme(legend.position="none")
library(plyr)
library(ggplot2)
ggplot(summary_bydmg, aes(x=evtype, y=dmg_sum, fill=evtype)) +
ggtitle("Events with the greatest economic consequences") +
geom_bar(stat="identity", color='black') +
guides(fill=guide_legend(override.aes=list(colour=NA))) +
coord_polar(theta='x') + xlab("") + ylab("")  +  theme(legend.position="none")
#register the necessary libraries
library(plyr)
library(ggplot2)
data <- read.csv("repdata-data-StormData.csv.bz2")
#all these columns names are transformed to lower case to facilitate the analysis.
#Also, all the columns that are not necessary are removed
names(data) <- tolower(names(data))
data<-subset(data, select = -c(state__, bgn_date, bgn_time, time_zone, county, countyname,
state, bgn_range, bgn_azi, bgn_locati, end_date, end_time,
county_end, countyendn, end_range, end_azi, end_locati,
length, width, f, mag, wfo, stateoffic, zonenames, latitude,
longitude, latitude_e, longitude_,remarks, refnum))
data$fatalscore <- (data$fatalities * 10) + data$injuries
data<-subset(data, select = -c(fatalities, injuries)) #dont need them anymore
data$propmult <- revalue(data$propdmgexp, c(" "="1",NULL="1","0"="1","1"="10","2"="100",
"3"="1000","4"="10000","5"="100000","6"="1000000",
"7"="10000000","8"="100000000","-"="1","?"="1",
"+"="1","B"="1000000000","h"="1","H"="1",
"K"="1000", "M"="1000000","m"="1000000")
, warn_missing = FALSE)
data$propmult <- as.character(data$propmult)
data$propmult <- as.integer(data$propmult)
data$propmult[is.na(data$propmult)] <- 1
data$propdmg <- data$propdmg * data$propmult
data<-subset(data, select = -c(propdmgexp, propmult)) #dont need them anymore
#Crop damage
data$cropmult <- revalue(data$cropdmgexp, c(" "="1",NULL="1","0"="1","1"="10","2"="100",
"3"="1000","4"="10000","5"="100000",
"6"="1000000","7"="10000000","8"="100000000"
,"-"="1","?"="1","+"="1","B"="1000000000",
"h"="1","H"="1","K"="1000", "M"="1000000",
"m"="1000000", "k"="1000"),
warn_missing = FALSE)
data$cropmult <- as.character(data$cropmult)
data$cropmult <- as.integer(data$cropmult)
data$cropmult[is.na(data$cropmult)] <- 1
data$cropdmg <- data$cropdmg * data$cropmult
#Total Damage is Added togheter and fields that are no longer necessary are removed
data$totaldamage <- data$propdmg + data$cropdmg
data<-subset(data, select = -c(cropdmgexp, cropmult, propdmg, cropdmg))
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
data$evtype <- trim(data$evtype)
data[grep("TORNADO",data$evtype),c("evtype")] <- 'TORNADO'
data[grep("THUNDERSTORM",data$evtype),c("evtype")] <- 'THUNDERSTORM'
summarydata <- ddply(data, 'evtype', summarise, fatalscore_sum = sum(fatalscore),
dmg_sum  = sum(totaldamage))
summary_bydmg <- arrange(summarydata, desc(dmg_sum))
summary_byfatal <- arrange(summarydata, desc(fatalscore_sum))
summary_bydmg<-subset(summary_bydmg, select = -c(fatalscore_sum))
summary_byfatal<-subset(summary_byfatal, select = -c(dmg_sum))
##summary by dmg
a <- summary_bydmg [1:19,]
b <- summary_bydmg [20:883,]
b$evtype <- 'Other'
b <- ddply(b, 'evtype', summarise, dmg_sum  = sum(dmg_sum))
summary_bydmg <- rbind(a,b)
#Into Billion dolars
summary_bydmg$dmg_sum <- summary_bydmg$dmg_sum/1000000000
##summary by fatal
a <- summary_byfatal [1:19,]
b <- summary_byfatal [20:883,]
b$evtype <- 'Other'
b <- ddply(b, 'evtype', summarise, fatalscore_sum  = sum(fatalscore_sum))
summary_byfatal <- rbind(a,b)
#Divide the score by 1000 to simplify reporting
summary_byfatal$fatalscore_sum <- summary_byfatal$fatalscore_sum/1000
ggplot(summary_bydmg, aes(x=evtype, y=dmg_sum, fill=evtype)) +
ggtitle("Events with the greatest economic consequences") +
geom_bar(stat="identity", color='black') +
guides(fill=guide_legend(override.aes=list(colour=NA))) +
coord_polar(theta='x') + xlab("") + ylab("")  +  theme(legend.position="none")
ggplot(summary_bydmg, aes(x=evtype, y=dmg_sum, fill=evtype)) +
ggtitle("Events with the greatest economic consequences") +
geom_bar(stat="identity", color='black') +
guides(fill=guide_legend(override.aes=list(colour=NA))) +
coord_polar(theta='x') + xlab("") + ylab("")  +  theme(legend.position="none") + geom_text(aes(label= dmg_sum))
ggplot(summary_bydmg, aes(x=evtype, y=dmg_sum, fill=evtype)) +
ggtitle("Events with the greatest economic consequences") +
geom_bar(stat="identity", color='black') +
guides(fill=guide_legend(override.aes=list(colour=NA))) +
coord_polar(theta='x') + xlab("") + ylab("")  +  theme(legend.position="none") + geom_text(aes(label= round(dmg_sum)))
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none")
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum)))
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum)), position = 10)
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum), position=10))
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum), position=100))
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum)))
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum))) + scale_x_discrete()
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum))) + scale_x_discrete(fatal_score_sum)
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum))) + scale_x_discrete(fatalscore_sum)
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum))) + scale_x_discrete(fatalscore_sum)
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum))) + scale_x_discrete(y)
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum))) + scale_x_continuous()
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum))) + scale_x_continuous(summary_byfatal$fatalscore_sum)
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum))) + scale_x_discrete(summary_byfatal$fatalscore_sum)
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum)))
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum)))+ scale_x_discrete(limits=summary_byfatal$fatalscore_sum)
ggplot(summary_byfatal, aes(x=evtype, y=fatalscore_sum, fill=evtype)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= round(fatalscore_sum)))
n <- 20
lambda = 0.2
pvals <- seq(.025, .1, by = .01)
pvals
exp(1,0.2)
rexp(1,0.2)
1/0.2
lambda = 0.2
n = 40
nsims = 1:1000
nsims
class(nsims)
rexp(n, lambda)
rexp(n, lambda)
rexp(n, lambda)
?rexp
rexp(1,0.2)
lambda = 0.2
n = 40
nsims = 1:1000
set.seed(820)
means <- data.frame(x = sapply(nsims, function(x) {mean(rexp(n, lambda))}))
head(means)
rexp(1, 0.2)
dexp(1,0.2)
pexp(1,0.2)
rexp
rexp(10,0.2)
rexp(10,0.2)
rexp(10,0.2)
rexp(10,0.2)
rexp(10,0.2)
setseed(123)
set.seed(123)
rexp(10,0.2)
rexp(10,0.2)
rexp(1,0.2)
rexp(1,0.2)
rexp(1,0.2)
rexp(1,0.2)
rexp(n, lambda)
rexp(n, lambda)
mean(rexp(n, lambda))
mean(rexp(n, lambda))
mean(rexp(n, lambda))
mean(rexp(n, lambda))
?replicate
replicate(2,mean(rexp(n, lambda)))
replicate(2,mean(rexp(n, lambda)))
replicate(2,mean(rexp(n, lambda)))
replicate(2,mean(rexp(n, lambda)))
x<-replicate(2,mean(rexp(n, lambda)))
x
class(x)
y<-1:2
y
df = data.frame(x,y)
df
sim_number <- 1:1000
rexp_means <- replicate(1000,mean(rexp(n, lambda)))
dfmeans <- data.frame (sim_number, rexp_means)
head(dfmeans)
lambda = 0.2
n = 40
sim_number <- 1:1000
rexp_means <- replicate(1000,mean(rexp(n, lambda)))
dfmeans <- data.frame (sim_number, rexp_means)
View(dfmeans)
mean(dfmeans$rexp_means)
?sd
1/0.2
1/lambda
lambda = 0.2
n = 40
sim_number <- 1:1000
rexp_means <- replicate(1000,mean(rexp(n, lambda)))
dfmeans <- data.frame (sim_number, rexp_means)
mean(dfmeans$rexp_means)
> lambda = 0.2
> n = 40
> sim_number <- 1:1000
> rexp_means <- replicate(1000,mean(rexp(n, lambda)))
> dfmeans <- data.frame (sim_number, rexp_means)
mean(dfmeans$rexp_means)
lambda = 0.2
n = 40
sim_number <- 1:1000
rexp_means <- replicate(1000,mean(rexp(n, lambda)))
dfmeans <- data.frame (sim_number, rexp_means)
mean(dfmeans$rexp_means)
var(dfmeans$rexp_means)
var(dfmeans$rexp_means)
sd(dfmeans$rexp_means)
((1/lambda)/sqrt(40))^2
var(dfmeans$rexp_means)
stddev <- 1/lambda
denominator <- sqrt(n)
expected_variance <- (stddev / denominator) ^ 2
expected_variance
library(ggplot2)
ggplot(data = means, aes(x = x)) +
geom_histogram(aes(y=..density..), fill = I('#00e6fa'),
binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(means$x)))
library(ggplot2)
ggplot(data = means, aes(x = x)) +
geom_histogram(aes(y=..density..), fill = I('#00e6fa'),
binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(dfmeans$rexp_means)))
library(ggplot2)
ggplot(data = dfmeans, aes(x = x)) +
geom_histogram(aes(y=..density..), fill = I('#00e6fa'),
binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(dfmeans$rexp_means)))
library(ggplot2)
ggplot(data = dfmeans, aes(x = rexp_means)) +
geom_histogram(aes(y=..density..), fill = I('#00e6fa'),
binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(dfmeans$rexp_means)))
qplot(dfmeans)
qplot(dfmeans, geom="histogram")
movies <- movies[sample(nrow(movies), 1000), ]
movies
View(movies)
qplot(rexp_means, data=dfmeans, geom="histogram")
library(ggplot2)
ggplot(data = dfmeans, aes(x = rexp_means)) +
geom_histogram(aes(y=..density..), fill = I('#00e6fa'),
binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(dfmeans$rexp_means)))
qplot(rexp_means, data=dfmeans, geom="histogram")
qplot(rexp_means, data=dfmeans, geom="histogram", color="green")
qplot(rexp_means, data=dfmeans, geom="histogram")
qplot(rexp_means, data=dfmeans, geom="histogram")+ geom_density()
qplot(rexp_means, data=dfmeans, geom="histogram") + geom_histogram(aes(y = ..density..))
qplot(rexp_means, data=dfmeans) + geom_histogram(aes(y = ..density..))
qplot(dfmeans, aes(x=rexp_means) + geom_histogram(aes(y = ..density..))
)
qplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(y = ..density..))
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(y = ..density..))
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..count..))
ggplot(dfmeans, aes(x=rexp_means)) + geom_density(alpha = 0.2)
ggplot(dfmeans, aes(x=rexp_means)) + geom_density(alpha = 0.2) + xlim(55, 70)
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..count..))
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..density..))
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..count..))
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..count..)) +   stat_function(fun = dnorm)
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..count..)) +   stat_function(fun = dnorm, mean=5)
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..count..)) +  stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(dfmeans$rexp_means)))
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..density..)) +  stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(dfmeans$rexp_means)))
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(dfmeans$rexp_means)))
qplot(rexp_means, data=dfmeans, geom="histogram")
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..density..)) +  stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(dfmeans$rexp_means)))
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..density..), binwidth=1) +  stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(dfmeans$rexp_means)))
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..density..), binwidth=0.1) +  stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(dfmeans$rexp_means)))
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..density..), binwidth=0.2) +  stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(dfmeans$rexp_means)))
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..density..), binwidth=0.2)
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..count..), binwidth=0.2)
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..count..), binwidth=0.3)
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..count..), binwidth=0.1)
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..count..), binwidth=0.2)
ggplot(dfmeans, aes(x=rexp_means)) + geom_histogram(aes(fill = ..count..))
nrows(dfmeans)
nrow(dfmeans)
length(dfmeans)
c(-1,1)
c(-1,1) + 10
mean(dfmeans$rexp_means) + c(-1,1) * 1.96 * sd(dfmeans$rexp_means)/sqrt(1000)
qnorm(0.975)
_mean <- mean(dfmeans$rexp_means)
dfmean <- mean(dfmeans$rexp_means)
dfstddev <- sd(dfmeans$rexp_means)
cintervalfrom <- (dfmean -1 * 1.96 * dfstddev) sqrt(1000)
cintervalfrom <- (dfmean -1 * 1.96 * dfstddev) / sqrtt(1000)
cintervalfrom <- (dfmean -1 * 1.96 * dfstddev) / sqrt(1000)
cintervalfrom
mean(dfmeans$rexp_means) + -1 * 1.96 * sd(dfmeans$rexp_means)/sqrt(1000)
mean(dfmeans$rexp_means)
dfmean
dfstddev
sd(dfmeans$rexp_means)
mean(dfmeans$rexp_means) + -1 * 1.96 * sd(dfmeans$rexp_means)/sqrt(1000)
mean(dfmeans$rexp_means) + -1 * 1.96 * sd(dfmeans$rexp_means)
(dfmean -1 * 1.96 * dfstddev)
mean(dfmeans$rexp_means) + -1 * 1.96 * sd(dfmeans$rexp_means)/sqrt(1000)
(dfmean -1 * 1.96 * dfstddev) /sqrt(1000)
(dfmean) - (1 * 1.96 * dfstddev /sqrt(1000)
)
(dfmean) - (1 * 1.96 * dfstddev /sqrt(1000))
cintervalfrom <- (dfmean) - (1 * 1.96 * dfstddev /sqrt(1000))
cintervalto <- (dfmean) + (1 * 1.96 * dfstddev /sqrt(1000))
ToothGrowth
cintervalfrom
cintervalto
cintervalfrom <- (dfmean) - (1 * 1.96 * dfstddev /sqrt(40))
cintervalfrom
cintervalto <- (dfmean) + (1 * 1.96 * dfstddev /sqrt(40))
cintervalto
cintervalfrom <- (dfmean) - (1 * 1.96 * standarderror)
cintervalto <- (dfmean) + (1 * 1.96 * standarderror)
standarderror <- sd(dfmeans$rexp_means) /  sqrt(40)
cintervalfrom <- (dfmean) - (1 * 1.96 * standarderror)
cintervalto <- (dfmean) + (1 * 1.96 * standarderror)
cintervalfrom
cintervalto
qnorm(0.975)
ToothGrowth
t <- ToothGrowth
t
View(t)
summary(t)
str(t)
t
ddply(t, '', summarise, a = sum(len), b  = max(len))
ddply(t, summarise, a = sum(len), b  = max(len))
ddply(t, 'supp', summarise, a = sum(len), b  = max(len))
ddply(t, 'dose', summarise, a = sum(len), b  = max(len))
ddply(t, 'dose', summarise, average_growth = mean(len), max_growth  = max(len))
t <- ToothGrowth
View(t)
t$dose <- factor(t$dose)
t
levels(t$supp) <- c("Orange Juice", "Ascorbic Acid")
t
ddply(t, 'dose', summarise, average_growth = mean(len), max_growth  = max(len))
ddply(t, 'supp', summarise, average_growth = mean(len), max_growth  = max(len))
ddply(t, 'supp, dose', summarise, average_growth = mean(len), max_growth  = max(len))
ddply(t, 'supp', 'dose', summarise, average_growth = mean(len), max_growth  = max(len))
ddply(t, 'supp' ~ 'dose', summarise, average_growth = mean(len), max_growth  = max(len))
aggregate(len,list(supp,dose),mean)
aggregate(t,list(supp,dose),mean)
with(ToothGrowth, tapply(len, list(supp,dose), mean))
tapply(t)
tapply(t$len, list(t$supp, t$dose), mean)
tapply(t$len, list(t$supp, t$dose), mean)
TukeyHSD
data(ChickWeight);
ChickWeight
View(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
library(reshape2)
library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
View(wideCW)
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
View(wideCW)
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
View(wideCW)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
wideCW14
t1 <- subset(t, dose %in% c(0.5,1))
t1
t.test(len ~ dose, paired=FALSE, var.equal=FALSE, data=t1)
t2 <- subset(t, dose %in% c(1,2))
t.test(len ~ dose, paired=FALSE, var.equal=FALSE, data=t2)
