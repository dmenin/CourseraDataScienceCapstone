newdata$foo <- (if (weekdays(newdata$date) %in% c('Saturday','Sunday')) then 'a' else 'b' )
newdata$foo <- ifelse( (weekdays(newdata$date) %in% c('Saturday','Sunday')), 'a', 'b' )
head(newdata)
newdata$foo <- ifelse( (weekdays(newdata$date) %in% c('Saturday','Sunday')), 'Weekend', 'Weekday' )
head(newdata)
newdata$isweekday <- ifelse( (weekdays(newdata$date) %in% c('Saturday','Sunday')), 'Weekend', 'Weekday' )
newdata <- subset(newdata, select -c(foo))
newdata <- subset(newdata, select = -c(foo))
head(newdata)
filter(compare, is.na(day_sum) )
ggplot(summary_newdate, aes(x=new_day_sum)) + geom_histogram(binwidth=3021, colour="black", fill="green") + ggtitle("Histogram of total number of steps taken each day")
ggplot(data=byinterval, aes(x=interval, y=steps_avg)) + geom_line() + geom_point() + ggtitle("Average number of steps by interval") + ylab("Number of steps")
ggplot(data=byinterval, aes(x=interval, y=steps_avg)) + geom_line() + geom_point() + ggtitle("Average number of steps by interval") + ylab("Number of steps")
head(newdata)
ddply(newdata, 'interval',summarise, steps_avg = mean(steps, na.rm = TRUE))
View(newdata)
ddply(newdata, c('interval','isweekday'),summarise, steps_avg = mean(steps, na.rm = TRUE))
newdatagroup <- ddply(newdata, c('interval','isweekday'),summarise, steps_avg = mean(steps, na.rm = TRUE))
View(newdatagroup)
ggplot(data=newdatagroup, aes(x=interval, y=steps_avg)) + geom_line() + geom_point() + ggtitle("Average number of steps by interval") + ylab("Number of steps")
ggplot(data=newdatagroup, aes(x=interval, y=steps_avg)) + geom_line() + geom_point() + ggtitle("Average number of steps by interval") + ylab("Number of steps") + facet_grid(isweekday ~ .) +
()
ggplot(data=newdatagroup, aes(x=interval, y=steps_avg)) + geom_line() + geom_point() + ggtitle("Average number of steps by interval") + ylab("Number of steps") + facet_grid(isweekday ~ .)
1)
library(reshape)
ggplot(summarydate_no_nas, aes(x=day_sum)) + geom_histogram(binwidth=3021, colour="black", fill="light blue") + ggtitle("Histogram of total
)
)
ggplot(summarydate_no_nas, aes(x=day_sum)) + geom_histogram(binwidth=3021, colour="black", fill="light blue") + ggtitle("Histogram of total number of steps taken each day")
ggplot(summarydate_no_nas, aes(x=day_sum)) + geom_histogram(binwidth=16, colour="black", fill="light blue") + ggtitle("Histogram of total number of steps taken each day")
ggplot(summarydate_no_nas, aes(x=day_sum)) + geom_histogram(binwidth=1000, colour="black", fill="light blue") + ggtitle("Histogram of total number of steps taken each day")
ggplot(summarydate_no_nas, aes(x=day_sum)) + geom_histogram(binwidth=1000, colour="black", fill="light blue") + ggtitle("Histogram of total number of steps taken each day")
ggplot(summarydate_no_nas, aes(x=day_sum)) + geom_histogram(binwidth=2000, colour="black", fill="light blue") + ggtitle("Histogram of total number of steps taken each day")
knit2html()
library(knitr)
knit2html()
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
pnorm(-0.7)
pnorm(-1)
?pnorm
pnorm(-2)
pnorm(-3)
pnorm(-1)
pnorm(70, mena=80, sd= 10)
pnorm(70, mean=80, sd= 10)
pnorm(80, mean=80, sd= 10)
pnorm(100, mean=100, sd= 10)
pnorm(100)
pnorm(1)
pnorm(0)
pois(10, lambda = 5 * 3).
pois(10, lambda = 5 * 3)
ppois(10, lambda = 5 * 3)
qnorm(0.95, mean = 110, sd = 75)
qnorm(0.95, mean = 1100, sd = 75)
pnorm(0.95, mean = 1100, sd=75)
pnorm(1223, mean = 1100, sd=75)
library(ddply)
?ddply
??ddply
t <- ToothGrowth
t$dose <- factor(t$dose)
levels(t$supp) <- c("Orange Juice", "Ascorbic Acid")
ddply(t, 'dose', summarise, average_growth = mean(len), max_growth  = max(len))
?ToothGrowth
aaaaaaaaaaaaaaaaaa
rm(list = ls())
subject <- c(1:5,1:5)
measurement <- c(140,138,150,148,135,132,135,151,146,130)
type <- c(rep("baseline", 5), rep("week2", 5))
dataset <- data.frame(subject, measurement, type)
ttest <- t.test(measurement ~ type, paired = T, data = dataset)
round(ttest$p.value,3)
rm(list = ls())
n <- 9
mean <- 1100
sd <- 30
round(mean + c(-1,1) * qt(0.975, df = n-1) * sd / sqrt(n))
rm(list = ls())
round(binom.test(3,4,p=0.5,alternative = 'greater')$p.value,2)
rm(list = ls())
round(ppois(0.01*1787-1, 10, lower.tail = F),2)
rm(list = ls())
n1 = 9
n2 = 9
mean1 = -3.0
sd1 = +1.5
sigma1 = sd1
mean2 = +1.0
sd2 = +1.8
sigma2 = sd2
sp = sqrt(((n1 - 1)*sigma1^2+(n2-1)*sigma2^2) / (n1 + n2 - 2))
t = abs(mean1 - mean2) / sp / sqrt(1/n1 + 1/n2)
round(1 - pt(t, df = n1 + n2 - 2),2)
rm(list = ls())
n = 9
ci = c(1077,1123)
mean = 0.5*(ci[2] + ci[1])
z = qt(0.9,df=n-1)
sigma = (mean - 1078) / z
sd = sigma * sqrt(n)
sd
rm(list = ls())
n = 100
mean = 0.01
sd = 0.04
sigma = sd / sqrt(n)
z = qnorm(0.95, mean = 0, sd = sigma)
round(pnorm(z, mean = mean, sd = sigma, lower.tail = F),2)
rm(list = ls())
n = c(100, 120, 140, 160, 180)
mean = 0.01
sd = 0.04
sigma = sd / sqrt(n)
z = qnorm(0.95, mean= 0, sd = sigma)
result = data.frame(num = n, beta = round(pnorm(z, mean = mean, sd = sigma, lower.tail = F),2))
result
rm(list = ls())
n1 = 288
n2 = 288
mean1 = 44
sd1 = 12
sigma1 = sd1
mean2 = 42.04
sd2 = 12
sigma2 = sd2
sp = sqrt(((n1 - 1)*sigma1^2+(n2-1)*sigma2^2) / (n1 + n2 - 2))
t = (mean1 - mean2) / sp / sqrt(1/n1 + 1/n2)
round(2*(1 - pt(t, df = n1 + n2 - 2)),2)
1./10
install.packages("dplyr")
shinyapps::deployApp("c:\\git\\CourseraDataProductsProject")
k <- kid.weights
library(dplyr)
library(shiny)
library(datasets)
library(calibrate)
library(UsingR)
library(dplyr)
k <- kid.weights
by_age <- group_by(k, age)
s <- summarise(by_age, mean_w = round(mean(weight),1), mean_h = round(mean(height),1), amt = n())
s
shinyapps::deployApp("c:\\git\\CourseraDataProductsProject")
version()
Version()
R.version()
R.version
R.Version
R.Version()
library(dplyr)
install.packages("dplyr")
shinyapps::deployApp("c:\\git\\CourseraDataProductsProject")
library(shiny)
install.packages("shiny")
library(shiny)
shinyapps::deployApp("c:\\git\\CourseraDataProductsProject")
runApp()
runApp("c:\\git\\CourseraDataProductsProject")
install.packages("calibrate")
runApp("c:\\git\\CourseraDataProductsProject")
install.packages("UsingR")
runApp("c:\\git\\CourseraDataProductsProject")
runApp("c:\\git\\CourseraDataProductsProject")
runApp("c:\\git\\CourseraDataProductsProject")
runApp("c:\\git\\CourseraDataProductsProject")
runApp("c:\\git\\CourseraDataProductsProject")
runApp("c:\\git\\CourseraDataProductsProject")
runApp("c:\\git\\CourseraDataProductsProject")
runApp("c:\\git\\CourseraDataProductsProject")
runApp("c:\\git\\CourseraDataProductsProject")
runApp("c:\\git\\CourseraDataProductsProject")
k <- kid.weights
k <- filter (k, gender == "M")
by_age <- group_by(k, age)
s <- summarise(by_age, mean_w = round(mean(weight),1), mean_h = round(mean(height),1), amt = n())
s <- mutate (s, bmi = round( (mean_w / 2.2046) / ((mean_h*2.54/100)^2),1) )
k <- basedataset()
by_age <- group_by(k, age)
s <- summarise(by_age, mean_w = round(mean(weight),1), mean_h = round(mean(height),1), amt = n())
s <- mutate (s, bmi = round( (mean_w / 2.2046) / ((mean_h*2.54/100)^2),1) )
s <- filter(s, age==50)
s
avg_bmi <- s[1,"bmi"]
avg_bmi
avg_bmi[1]
avg_bmi[1,1]
runApp("c:\\git\\CourseraDataProductsProject")
type(bmi)
class(bmi)
class(avg_bmi)
toString(avg_bmi)
runApp("c:\\git\\CourseraDataProductsProject")
runApp("c:\\git\\CourseraDataProductsProject")
shinyapps::deployApp("c:\\git\\CourseraDataProductsProject")
install.packages("shiny")
install.packages("shiny")
library(shiny)
shinyapps::deployApp("c:\\git\\CourseraDataProductsProject")
library(shiny)
shinyapps::deployApp("c:\\git\\CourseraDataProductsProject")
shinyapp::deployApp("c:\\git\\CourseraDataProductsProject")
ShinyApp::deployApp("c:\\git\\CourseraDataProductsProject")
shinyApp::deployApp()
.libPaths()
.libPaths()
?.libPaths
.Library.site
.Library.site()
.libPaths()
.libPaths()
runApp()
install.packages("shiny")
library(shiny)
runApp()
runApp("C://git//CourseraDataProductsProject")
install.packages("dplyr")
install.packages("UsingR")
runApp("C://git//CourseraDataProductsProject")
k <- kid.weights
k <- filter (k, gender == "M")
library(shiny)
library(datasets)
library(calibrate)
library(UsingR)
library(dplyr)
runApp("C://git//CourseraDataProductsProject")
k <- kid.weights
k <- filter (k, gender == "M")
by_age <- group_by(k, age)
s <- summarise(by_age, mean_w = round(mean(weight),1), mean_h = round(mean(height),1), amt = n())
s <- mutate (s, bmi = round( (mean_w / 2.2046) / ((mean_h*2.54/100)^2),1) )
s <- filter(s, age==50)
k <- filter(k, age >= 6-2 & age <= 6 +2)
gender <- if (input$radioGender == 1) {'male'} else {'female'}
k <- filter(k, age >= 6-2 & age <= 6 +2)
gender <- if (1 == 1) {'male'} else {'female'}
t = paste("Weight X Height plot for", gender,"kids from", input$ageSlider-2 ,"to", input$ageSlider+2, "months of age" , sep = " ")
d <- plot(k$weight, k$height,  xlab="weight", ylab="Height", xlim=c(0, 150), ylim=c(0, 67) , main= t)
d<- text(k$weight, k$height,k$age, cex=0.6, pos=4, col="blue")
#points(x=80,y=20, col='red', lwd=6)
d <- textxy(input$weight, input$height, cex=1, col='red',"* -> your kid is here")
?textxy
??textxy
runApp("C://git//CourseraDataProductsProject")
library(calibrate)
install.packages("calibrate")
library(calibrate)
runApp("C://git//CourseraDataProductsProject")
shinyapps::deployApp("C://git//CourseraDataProductsProject")
install.packages("shiny")
install.packages("shiny")
library(shiny)
shinyapps::deployApp("C://git//CourseraDataProductsProject")
.libPaths()
library(shinyapps)
shinyapps::deployApp("C://git//CourseraDataProductsProject")
library(devtools)
install.packages("devtools")
shinyapps::deployApp("C://git//CourseraDataProductsProject")
library(devtools)
library(devtools)
shinyapps::deployApp("C://git//CourseraDataProductsProject")
devtools::install_github("rstudio/shinyapps")
shinyapps::deployApp("C://git//CourseraDataProductsProject")
k <- kid.weights
library(shiny)
library(datasets)
library(calibrate)
library(UsingR)
library(dplyr)
k <- kid.weights
k <- filter (k, gender == "M")
k <- filter(k, age >= 84-2 & age <= 84 +2)
k
class(k)
rows(k)
nrow(k)
runApp("C://git//CourseraDataProductsProject")
runApp("C://git//CourseraDataProductsProject")
shinyapps::deployApp("C://git//CourseraDataProductsProject")
runApp("C://git//CourseraDataProductsProject")
runApp("C://git//CourseraDataProductsProject")
runApp("C://git//CourseraDataProductsProject")
t
runApp("C://git//CourseraDataProductsProject")
runApp("C://git//CourseraDataProductsProject")
runApp("C://git//CourseraDataProductsProject")
t <- c("Your kid's BMI is", kid_bmi, "which is ", round((dif-1) * 100,2),"% above the average(",avg_bmi,")")
t <- c("Your kid's BMI is", 2, "which is ", round((5-1) * 100,2),"% above the average(",3,")")
t
toString(t)
?toString
x <- c("a", "b", "aaaaaaaaaaa")
toString(x)
toString(x, width = 8)
x <- c("a", "b", "aaaaaaaaaaa")
toString(x)
toString(x)
paste(t)
toString(t)
T
t
class(t)
paste(t, collapse = '')
runApp("C://git//CourseraDataProductsProject")
runApp("C://git//CourseraDataProductsProject")
shinyapps::deployApp("C://git//CourseraDataProductsProject")
install.packages("knitr")
library(knitr)
==========================
```
Fooo
Slide With Plot2
asd asd
height: 900
kid.weights
install.packages("Rserve")
library(Rserve)
Rserve()
library(Rserve)
Rserve()
"C:\Users\dim\DOCUME~1\R\WIN-LI~1\3.1\Rserve\libs\x64\Rserve.exe"
Rserve()
library(Rserve)
Rserve()
dbinom(1,size =2, prob = .5)
dbinom(x=1,size =2, prob = .5)
probx = dbinom(x, size=5, prob = 1/5)
cbind(x, probx)
x = seq(0,5,by=1)
probx = dbinom(x, size=5, prob = 1/5)
cbind(x, probx)
plot(x, probx, type = 'h')
x = seq(0,5,by=1)
probx = dbinom(x, size=5, prob = 1/2)
cbind(x, probx)
3 +2
?summary
?sqe
?seq
Developing Data Products Presentation
?show
?dnorm
dnorm(1,n=2, p=1/2)
?dbinon
?dbinom
dbinon(1,n=2, p=1/2)
dbinom(1,n=2, p=1/2)
dbinom(1,size=2, p=1/2)
dbinom(1,size=3, p=1/2)
X = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,5,6,7,8,9,10,11,12,13,14,15,20,25,33,34,35,36,37,38,39), nrow=20, ncol=2)
x
X
t(x)
X = matrix(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20), nrow=20, ncol=2)
Y = matrix(c(5,6,7,8,9,10,11,12,13,14,15,20,25,33,34,35,36,37,38,39), nrow=20, nxol=1)
Y = matrix(c(5,6,7,8,9,10,11,12,13,14,15,20,25,33,34,35,36,37,38,39), nrow=20, ncol=1)
X
Y
X*Y
t(X)
t(X) * Y
t(X) * X
X
t(X) %*% X
A = t(X) %*% X
B = solve(A)
B
C = B * t(x)
C = B * t(X)
t(X)
C = B %*% t(X)
Y
C
C %*% Y
D = C %*% Y
D
D
mtcars
lm(mpg ~cyl)
lm(mpg ~cyl, mtcars)
getwd()
write.csv(mtcars, "mt.csv")
?mtcars
lm(mpg ~ cyl + hp + mpg, mtcars)
lm(mpg ~ cyl + hp + mpg, mtcars)
head(mtcars)
lm(mpg ~ cyl + hp + wt, mtcars)
data.matrix(mtcars)
data.matrix(mtcars[,1])
data.matrix(mtcars[,2:4:6])
data.matrix(mtcars[,2,4,6])
data.matrix(mtcars[,2:6])
data.matrix(mtcars[,3:6])
data.matrix(mtcars[,2:6])
data.matrix(mtcars[,c("cyl","hp","wt")])
a = data.matrix(mtcars[,c("cyl","hp","wt")])
a
data.matrix(mtcars[,c("cyl","hp","wt")], rownames.force = NA)
data.matrix(mtcars[,c("cyl","hp","wt")], rownames.force = "")
data.matrix(mtcars[,c("cyl","hp","wt")])
X = data.matrix(mtcars[,c("cyl","hp","wt")])
X
names(x)
View(X)
class(x)
class(X)
names(X)
View(X)
subset(X, select = -c(row.names))
subset(X, select = -c("row.names"))
X
head(X)
X[,"hp"]
X[,"row.names"]
X
X = data.matrix(mtcars[,c("cyl","hp","wt")])
X
ncol(X)
Y = data.matrix(mtcars[,c("mpg")])
Y
X = data.matrix(mtcars[,c("cyl","hp","wt")])
A = t(X) %*% X
B = solve(A)
C = B %*% t(X)
D = C %*% Y
D
X
nrow (X)
X
mutate()
library(dplyr)
X
mutate(X, intercept = 1)
mutate(X, intercept = 1 *1)
auxt = mtcars
aux = mtcars
aux[,c("cyl","hp","wt")]
aux = aux[,c("cyl","hp","wt")]
aux
mutate(aux, i=1)
mutate(aux, i=1)
mutate(aux, i=1)
aux = mutate(aux, i=1)
aux
aux[,c("cyl","hp","wt")]
aux[,c("i",cyl","hp","wt")]
aux[,c("i","cyl","hp","wt")]
X = data.matrix(aux[,c("i","cyl","hp","wt")])
X
Y = data.matrix(mtcars[,c("mpg")]
)
A = t(X) %*% X
B = solve(A)
C = B %*% t(X)
D = C %*% Y
D
(solve(t(X) %*% X) %*% t(X)) %*% Y
#asdsadsd
adsadsad
#we are going to need the dplyr library to call the mutate function
library(dplyr)
#1)Create a copy of the mtcars dataset
aux = mtcars
#2)Extract just the columns we want:
aux = aux[,c("cyl","hp","wt")]
#3)Add a column with “one”
aux = mutate(aux, i=1)
X = data.matrix(aux[,c("cyl","hp","wt", "i")])
X
Y = data.matrix(mtcars[,c("mpg")])
(solve(t(X) %*% X) %*% t(X)) %*% Y
install.packages("caret")
library(caret); library(kernlab); data(spam)
HEAD(SPMA)
spam
data(spam)
install.packages("kernlab")
library(caret); library(kernlab);
data(spam)
head(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
library(caret);
library(kernlab);
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
library(e1071)
install.packages("e1071")
library(e1071)
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
modelFit$finalModel
predictions <- predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
getwd()
getwd()
