tweet_txt[rt_patterns]
who_retweet = as.list(1:length(rt_patterns))
who_post = as.list(1:length(rt_patterns))
for (i in 1:length(rt_patterns))
{
# get tweet with retweet entity
twit = tweets[[rt_patterns[i]]]
# get retweet source
poster = str_extract_all(twit$getText(),"(RT|via)((?:\\b\\W*@\\w+)+)")
#remove ':'
poster = gsub(":", "", unlist(poster))
# name of retweeted user
who_post[[i]] = gsub("(RT @|via @)", "", poster, ignore.case=TRUE)
# name of retweeting user
who_retweet[[i]] = rep(twit$getScreenName(), length(poster))
}
who_post = unlist(who_post)
who_retweet = unlist(who_retweet)
#two column matrix of edges
retweeter_poster = cbind(who_retweet, who_post)
# generate graph
rt_graph = graph.edgelist(retweeter_poster)
# get vertex names
ver_labs = get.vertex.attribute(rt_graph, "name", index=V(rt_graph))
# choose some layout
glay = layout.fruchterman.reingold(rt_graph)
# plot
par(bg="gray15", mar=c(1,1,1,1))
plot(rt_graph, layout=glay,
vertex.color="gray25",
vertex.size=10,
vertex.label=ver_labs,
vertex.label.family="sans",
vertex.shape="none",
vertex.label.color=hsv(h=0, s=0, v=.95, alpha=0.5),
vertex.label.cex=0.85,
edge.arrow.size=0.8,
edge.arrow.width=0.5,
edge.width=3,
edge.color=hsv(h=.95, s=1, v=.7, alpha=0.5))
# add title
title("nTweets from the User account @mashable: Who retweets whom",
cex.main=1, col.main="gray95")
tweets = userTimeline("mashable", n=1000)
tweet_txt = sapply(tweets, function(x) x$getText())
rt_patterns = grep("(RT|via)((?:\\b\\W*@\\w+)+)",tweet_txt, ignore.case=TRUE)
tweet_txt[rt_patterns]
who_retweet = as.list(1:length(rt_patterns))
who_post = as.list(1:length(rt_patterns))
for (i in 1:length(rt_patterns))
{
# get tweet with retweet entity
twit = tweets[[rt_patterns[i]]]
# get retweet source
poster = str_extract_all(twit$getText(),"(RT|via)((?:\\b\\W*@\\w+)+)")
#remove ':'
poster = gsub(":", "", unlist(poster))
# name of retweeted user
who_post[[i]] = gsub("(RT @|via @)", "", poster, ignore.case=TRUE)
# name of retweeting user
who_retweet[[i]] = rep(twit$getScreenName(), length(poster))
}
who_post = unlist(who_post)
who_retweet = unlist(who_retweet)
#two column matrix of edges
retweeter_poster = cbind(who_retweet, who_post)
# generate graph
rt_graph = graph.edgelist(retweeter_poster)
# get vertex names
ver_labs = get.vertex.attribute(rt_graph, "name", index=V(rt_graph))
# choose some layout
glay = layout.fruchterman.reingold(rt_graph)
# plot
par(bg="gray15", mar=c(1,1,1,1))
plot(rt_graph, layout=glay,
vertex.color="gray25",
vertex.size=10,
vertex.label=ver_labs,
vertex.label.family="sans",
vertex.shape="none",
vertex.label.color=hsv(h=0, s=0, v=.95, alpha=0.5),
vertex.label.cex=0.85,
edge.arrow.size=0.8,
edge.arrow.width=0.5,
edge.width=3,
edge.color=hsv(h=.95, s=1, v=.7, alpha=0.5))
# add title
title("nTweets from the User account @mashable: Who retweets whom",
cex.main=1, col.main="gray95")
tweets = searchTwitter("Social Media", n=20, cainfo="cacert.pem")
api_key <- "zjtQwiqHGXg8qaCXTIa4x7OFx"
api_secret <- "phHgOkCVM1a5fXUP36qpcCv9Rot4FxzHqF5qABvjq3r1FWcpft"
access_token <- "45141109-rIXQxFLqM3FAtV4XKzlswxOzKbBL9zhwjkSDmpTh0"
access_token_secret <- "JExDufSFXeURJUalHTtDt1Z2RNgAsXDqwStlkLnwfnQ4k"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
tweets = searchTwitter("Social Media", n=20, cainfo="cacert.pem")
search_twitter_and_store("Social Media", n=20, cainfo="cacert.pem")
searchTwitter()
?searchTwitter
tweets = searchTwitter("Social Media", n=20, cainfo="cacert.pem")
tweets = searchTwitter("Social Media", n=20)
tweets
setStatusSource
getStatusSource
devices <- sapply(tweets, function(x) x$getStatusSource())
devices <- gsub("","", devices)
devices <- strsplit(devices, ">")
devices <- sapply(devices,function(x) ifelse(length(x) > 1, x[2], x[1]))[/code]
devices <- sapply(devices,function(x) ifelse(length(x) > 1, x[2], x[1]))
pie(table(sources))
pie(table(devices))
pie(table(devices))
devices
devices
tweets[1]
tweets[1]$text
tweets[1][1]$text
tweets[1][1]$txt
tweets[1]$txt
text <- sapply(tweets, function(x) x$getText())
text
sapply(tweets, function(x) x$getStatusSource())
devices <- sapply(tweets, function(x) x$getStatusSource())
gsub("","", devices)
?gsub
devices <- gsub("","", devices)
strsplit(devices, ">")
tweets = searchTwitter("Social Media", n=1)
devices <- sapply(tweets, function(x) x$getStatusSource())
devices
devices <- gsub("","", devices)
devices
devices <- strsplit(devices, ">")
devices
sapply(devices,function(x) ifelse(length(x) > 1, x[2], x[1]))
source(“http://biostat.jhsph.edu/~jleek/code/twitterMap.R”)
source('http://biostat.jhsph.edu/~jleek/code/twitterMap.R')
twitterMap("dmenin", fileName="foo.pdf", nMax=500)
getwd()
rm(list = ls())
con <- file("c:\\git\\capstone\\final\\en_US_small\\en_US.twitter_small.txt", "r")
a<- readLines(con, 10)
close(con)
df<-as.data.frame(a)
names(df) <- c("text")
myCorpus <- Corpus(VectorSource(df$text))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
itteR)
rm(list = ls())
con <- file("c:\\git\\capstone\\final\\en_US_small\\en_US.twitter_small.txt", "r")
a<- readLines(con, 1)
close(con)
df<-as.data.frame(a)
names(df) <- c("text")
myCorpus <- Corpus(VectorSource(df$text))
myCorpus
rm(list = ls())
con <- file("c:\\git\\capstone\\final\\en_US_small\\en_US.twitter_small.txt", "r")
a<- readLines(con, 2)
close(con)
df<-as.data.frame(a)
names(df) <- c("text")
myCorpus <- Corpus(VectorSource(df$text))
myCorpus
----
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus
myCorpus[1]
class(myCorpus)
myCorpus
myCorpus[[1]]
myCorpus[[2]]
myCorpus[1][2]
rm(list = ls())
con <- file("c:\\git\\capstone\\final\\en_US_small\\en_US.twitter_small.txt", "r")
a<- readLines(con, 10)
close(con)
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, removePunctuation) # remove punctuation
myCorpus <- tm_map(myCorpus, removeNumbers) #remove numbers
removeURL <- function(x) gsub("http[[:alnum:]]*", "", x) # remove URLs
myCorpus <- tm_map(myCorpus, removeURL)
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
df<-as.data.frame(a)
names(df) <- c("text")
myCorpus <- Corpus(VectorSource(df$text))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, removePunctuation) # remove punctuation
myCorpus <- tm_map(myCorpus, removeNumbers) #remove numbers
removeURL <- function(x) gsub("http[[:alnum:]]*", "", x) # remove URLs
myCorpus <- tm_map(myCorpus, removeURL)
myCorpus <- tm_map(myCorpus, PlainTextDocument) #http://stackoverflow.com/questions/24191728/documenttermmatrix-error-on-corpus-argument
tdm <- TermDocumentMatrix(myCorpus, control = list(wordLengths = c(1, Inf)))
freq.terms <- findFreqTerms(tdm, lowfreq = 10)
term.freq <- rowSums(as.matrix(tdm))
term.freq <- subset(term.freq, term.freq >= 10)
df <- data.frame(term = names(term.freq), freq = term.freq) #WORD COUNT
df
freq.terms <- findFreqTerms(tdm, lowfreq = 1)
freq.terms
term.freq <- rowSums(as.matrix(tdm))
freq.terms
term.freq <- subset(term.freq, term.freq >= 1)
term.freq
rowSums(as.matrix(tdm))
myCorpus <- tm_map(myCorpus, PlainTextDocument) #http://stackoverflow.com/questions/24191728/documenttermmatrix-error-on-corpus-argument
tdm <- TermDocumentMatrix(myCorpus, control = list(wordLengths = c(1, Inf)))
rowSums(as.matrix(tdm))
rm(list = ls())
con <- file("c:\\git\\capstone\\final\\en_US_small\\en_US.twitter_small.txt", "r")
a<- readLines(con, 1)
close(con)
df<-as.data.frame(a)
names(df) <- c("text")
myCorpus <- Corpus(VectorSource(df$text))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, removePunctuation) # remove punctuation
myCorpus <- tm_map(myCorpus, removeNumbers) #remove numbers
removeURL <- function(x) gsub("http[[:alnum:]]*", "", x) # remove URLs
myCorpus <- tm_map(myCorpus, removeURL)
myCorpus <- tm_map(myCorpus, PlainTextDocument) #http://stackoverflow.com/questions/24191728/documenttermmatrix-error-on-corpus-argument
tdm <- TermDocumentMatrix(myCorpus, control = list(wordLengths = c(1, Inf)))
rowSums(as.matrix(tdm))
con <- file("c:\\git\\capstone\\final\\en_US_small\\en_US.twitter_small.txt", "r")
a<- readLines(con, 3)
close(con)
df<-as.data.frame(a)
names(df) <- c("text")
myCorpus <- Corpus(VectorSource(df$text))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, removePunctuation) # remove punctuation
myCorpus <- tm_map(myCorpus, removeNumbers) #remove numbers
removeURL <- function(x) gsub("http[[:alnum:]]*", "", x) # remove URLs
myCorpus <- tm_map(myCorpus, removeURL)
myCorpus <- tm_map(myCorpus, PlainTextDocument) #http://stackoverflow.com/questions/24191728/documenttermmatrix-error-on-corpus-argument
tdm <- TermDocumentMatrix(myCorpus, control = list(wordLengths = c(1, Inf)))
rowSums(as.matrix(tdm))
term.freq <- rowSums(as.matrix(tdm))
term.freq
class(term.freq)
subset(term.freq, term.freq >= 1)
subset(term.freq, term.freq > 1)
df <- data.frame(term = names(term.freq), freq = term.freq) #WORD COUNT
df
names(term.freq)
term.freq
term.freq <- subset(term.freq, term.freq > 1)
term.freq
df <- data.frame(term = names(term.freq), freq = term.freq) #WORD COUNT
df
rm(list = ls())
con <- file("c:\\git\\capstone\\final\\en_US_small\\en_US.twitter_small.txt", "r")
a<- readLines(con, 3)
close(con)
df<-as.data.frame(a)
names(df) <- c("text")
myCorpus <- Corpus(VectorSource(df$text))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, removePunctuation) # remove punctuation
myCorpus <- tm_map(myCorpus, removeNumbers) #remove numbers
removeURL <- function(x) gsub("http[[:alnum:]]*", "", x) # remove URLs
myCorpus <- tm_map(myCorpus, removeURL)
myCorpus <- tm_map(myCorpus, PlainTextDocument) #http://stackoverflow.com/questions/24191728/documenttermmatrix-error-on-corpus-argument
tdm <- TermDocumentMatrix(myCorpus, control = list(wordLengths = c(1, Inf)))
term.freq <- rowSums(as.matrix(tdm))
term.freq <- subset(term.freq, term.freq >= 1)
df <- data.frame(term = names(term.freq), freq = term.freq) #WORD COUNT
df
rm(list = ls())
con <- file("c:\\git\\capstone\\final\\en_US_small\\en_US.twitter_small.txt", "r")
a<- readLines(con)
close(con)
rm(list = ls())
#con <- file("c:\\git\\capstone\\final\\en_US_small\\en_US.twitter_small.txt", "r")
con <- file("c:\\git\\capstone\\final\\en_US\\en_US.twitter.txt", "r")
a<- readLines(con)
close(con)
df<-as.data.frame(a)
names(df) <- c("text")
myCorpus <- Corpus(VectorSource(df$text))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
rm(list = ls())
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
a
shiny::runApp('C:/git/capstone/TextPredictionApp')
a
dt_n1 <- readRDS("dt_n1.RDS")
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
rm(list = ls())
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
blog_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.blogs.txt"
news_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.news.txt"
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
blog_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.blogs.txt"
news_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.news.txt"
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 10000,1,1)
#df2 <- buildNGram(blog_en, 1000,1,1)
#df3 <- buildNGram(news_en, 1000,1,1)
end <- Sys.time()
end-begin
df_n1 <- rbind(df1,rbind(df2,df3))
rownames(df_n1) <- NULL
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
names(df_n1) <- c("target", "freq")
dt_n1 <-data.table(df_n1)
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 10000,1,1)
source('buildNGram.R')
setwd("C:\\git\\capstone\\1BuildModel")
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
blog_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.blogs.txt"
news_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.news.txt"
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 10000,1,1)
#df2 <- buildNGram(blog_en, 1000,1,1)
#df3 <- buildNGram(news_en, 1000,1,1)
end <- Sys.time()
end-begin
df_n1 <- rbind(df1,rbind(df2,df3))
rownames(df_n1) <- NULL
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
names(df_n1) <- c("target", "freq")
dt_n1 <-data.table(df_n1)
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
df1 <- buildNGram(twitter_en, 10000,1,1)
rm(list = ls())
libs <- c("tm","ggplot2", "graph", "Rgraphviz", "wordcloud","twitteR","RWeka","dplyr", "data.table")
lapply(libs, require, character.only = TRUE)
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 10000,1,1)
#df2 <- buildNGram(blog_en, 1000,1,1)
#df3 <- buildNGram(news_en, 1000,1,1)
end <- Sys.time()
end-begin
df_n1 <- rbind(df1,rbind(df2,df3))
rownames(df_n1) <- NULL
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
names(df_n1) <- c("target", "freq")
dt_n1 <-data.table(df_n1)
df1 <- buildNGram(twitter_en, 10000,1,1)
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 1000,1,1)
df2 <- buildNGram(blog_en, 1,1,1)
df3 <- buildNGram(news_en, 1,1,1)
end <- Sys.time()
end-begin
df_n1 <- rbind(df1,rbind(df2,df3))
rownames(df_n1) <- NULL
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
names(df_n1) <- c("target", "freq")
dt_n1 <-data.table(df_n1)
df1 <- buildNGram(twitter_en, 1000,1,1)
rm(list = ls())
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
blog_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.blogs.txt"
news_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.news.txt"
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 10000,1,1)
df2 <- buildNGram(blog_en, 1,1,1)
df3 <- buildNGram(news_en, 1,1,1)
end <- Sys.time()
end-begin
df_n1 <- rbind(df1,rbind(df2,df3))
rownames(df_n1) <- NULL
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
names(df_n1) <- c("target", "freq")
dt_n1 <-data.table(df_n1)
saveRDS(dt_n1,"dt_n1.RDS")
rm(list = ls())
source('buildNGram.R')
twitter_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.twitter.txt"
blog_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.blogs.txt"
news_en <-  "c:\\git\\capstone\\0ModelData\\en_US\\en_US.news.txt"
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 100000,1,1)
df2 <- buildNGram(blog_en, 1,1,1)
df3 <- buildNGram(news_en, 1,1,1)
end <- Sys.time()
end-begin
df_n1 <- rbind(df1,rbind(df2,df3))
rownames(df_n1) <- NULL
df_n1<-aggregate(df_n1[,c("freq")],by=list(df_n1$term),FUN=sum)
names(df_n1) <- c("target", "freq")
dt_n1 <-data.table(df_n1)
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 100000,2,2)
df2 <- buildNGram(blog_en, 1,2,2)
df3 <- buildNGram(news_en, 1,2,2)
end <- Sys.time()
end-begin
df_n2 <- rbind(df1,rbind(df2,df3))
rownames(df_n2) <- NULL
df_n2<-aggregate(df_n2[,c("freq")],by=list(df_n2$term),FUN=sum)
names(df_n2) <- c("term", "freq")
rexp <- "^(\\w+)\\s?(.*)$"
df_n2<-data.frame(gram=sub(rexp,"\\1",df_n2$term), target=sub(rexp,"\\2",df_n2$term), freq = df_n2$freq)
dt_n2 <-data.table(df_n2)
begin <- Sys.time()
df1 <- buildNGram(twitter_en, 100000,3,3)
df2 <- buildNGram(blog_en, 1,3,3)
df3 <- buildNGram(news_en, 1,3,3)
end <- Sys.time()
end-begin
df_n3 <- rbind(df1,rbind(df2,df3))
rownames(df_n3) <- NULL
df_n3<-aggregate(df_n3[,c("freq")],by=list(df_n3$term),FUN=sum)
names(df_n3) <- c("term", "freq")
dt_n3 <-data.table(df_n3)
dt_n3<-data.table(  gram = sub(" [^ ]*$", "", dt_n3$term), target = sub(".* ", "", dt_n3$term), freq=dt_n3$freq )
saveRDS(dt_n1,"dt_n1.RDS")
saveRDS(dt_n2,"dt_n2.RDS")
saveRDS(dt_n3,"dt_n3.RDS")
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
shiny::runApp('C:/git/capstone/TextPredictionApp')
title: "CapstoneMilestoneReport"
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
getwd()
setwd("C:\\git\\capstone\\MilestoneReport")
getwd()
title: "MilestoneReport"
---
---
title: "Coursera Machine Learning"
author: "Diego Menin"
date: "Wednesday, February 18, 2015"
output: html_document
---
## Summary
Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self-movement - a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behaviour, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it.
The goal of this project is to use Machine Learning techniques to predict whether users are performing exercises correctly or not based on data collected data from accelerometers on the belt, forearm, arm, and dumbbell of 6 participants, who were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har
## Registering Libraries
A few R libriries are necessary to perform the Anlysis.
```{r, echo=FALSE}
library(caret);
library(plyr);
library(randomForest);
```
## Loading data
We load the training data can be found here: https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv an split it into training and testing datsets by running the createDataPartition function:
```{r}
full <-  read.csv("C:\\git\\machinelearning\\pml-training.csv")
#By default, simple bootstrap resampling is used
inTrain <- createDataPartition(y=full$classe, p=0.75,list = FALSE)
train <- full[inTrain,]
test <- full[-inTrain,]
```
## Variable Selection
The full data set has 160 variables, most of which are not usefull for prediction due to the huge amount of null (or NA's) values. So, an analysis was run on each of the variables to identify the ones who are suitable to be used. The whole analysis code won't be included here because its huge, but as an example I can show variable "kurtosis_picth_belt" which has 19216 "blank" values ou of 19622 thus not meaningfull to the analysis.
```{r}
head(count(full, "kurtosis_picth_belt"))
```
So after the analysins, the Unnecessary variables are removed from the train data.
```{r}
#Removing Unnecessary variables from the train data.
train <- train[,c("classe", "num_window",    "pitch_arm",  "pitch_belt",  "pitch_dumbbell",  "pitch_forearm",	"roll_arm",	"roll_belt",	"roll_dumbbell",	"roll_forearm",	"total_accel_arm",	"total_accel_belt",	"total_accel_dumbbell",	"total_accel_forearm",	"yaw_arm",	"yaw_belt",	"yaw_dumbbell",	"yaw_forearm",	"accel_arm_x",	"accel_arm_y",	"accel_arm_z",	"accel_belt_x",	"accel_belt_y",	"accel_belt_z",	"accel_dumbbell_x",	"accel_dumbbell_y",	"accel_dumbbell_z",	"accel_forearm_x",	"accel_forearm_y",	"accel_forearm_z",	"gyros_arm_x",	"gyros_arm_y",	"gyros_arm_z",	"gyros_belt_x",	"gyros_belt_y",	"gyros_belt_z",	"gyros_dumbbell_x",	"gyros_dumbbell_y",	"gyros_dumbbell_z",	"gyros_forearm_x",	"gyros_forearm_y",	"gyros_forearm_z",	"magnet_arm_x",	"magnet_arm_y",	"magnet_arm_z",	"magnet_belt_x",	"magnet_belt_y",	"magnet_belt_z",	"magnet_dumbbell_x",	"magnet_dumbbell_y",	"magnet_dumbbell_z",	"magnet_forearm_x",	"magnet_forearm_y",	"magnet_forearm_z")]
```
## Run Analysis
A model is created using random Forests with 50 trees and the test data is predicted using the model:
```{r}
fitforest <- randomForest(classe ~ ., data=train, ntree=50)
predForest <-predict(fitforest, test)
```
Then a confusion matrix is built to check the Out of sample error using cross-validation.
We can also analyse Sensitivity and Specificit by class
```{r}
cm <- confusionMatrix(predForest, test$classe)
cm$table
cm$byClass
```
---
title: "MilestoneReport"
author: "Diego Menin"
date: "Wednesday, March 25, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
library(knitr)
date: "Wednesday, March 25, 2015"
