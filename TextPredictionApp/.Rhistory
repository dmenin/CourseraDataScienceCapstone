df<-as.data.frame(a)
names(df) <- c("text")
myCorpus <- Corpus(VectorSource(df$text))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
rm(list = ls())
text <- readLines("en_US.twitter.txt")
getwd()
setwd("C:\\git\\capstone\\MilestoneReport")
text <- readLines("en_US.twitter.txt")
head(text)
head(text)
?str_extract
library(stringr)
?str_extract
arquivos <- sapply(list.files("C:\\git\\capstone\\final\\en_US",full.names=T),
function(file) as.numeric(str_extract(system2("wc",c("-l",file),stdout=T),"[0-9]+")))
arquivos
class(arquivos)
list.files("C:\\git\\capstone\\final\\en_US",full.names=T),
list.files("C:\\git\\capstone\\final\\en_US",full.names=T)
arquivos[1]
names(arquivos[1])
arquivos[1]
arquivos[1]/10
arquivos
c("-l","C:\\git\\capstone\\final\\en_US\\en_US.blogs.txt")
system2("wc",c("-l",file),stdout=T)
system2("wc",c("-l","C:\\git\\capstone\\final\\en_US\\en_US.blogs.txt"),stdout=T)
v<-c("en_US.blogs.txt","en_US.news.txt", "en_US.twitter.txt")
v1<-c("899289","1010242","2360148")
v2<-c("205","200","163")
df<-data.fram(FileName=v,nRows=v1,FileSize=v2)
df<-data.frame(FileName=v,nRows=v1,FileSize=v2)
df
basicInfo<-data.frame(FileName=v,nRows=v1,FileSize=v2)
saveRDS(basicInfo,"basicInfo")
basicInfo <- readRDS("basicInfo.RDS")
basicInfo <- readRDS("basicInfo.RDS")
getwd()
basicInfo <- readRDS("basicInfo.RDS")
basicInfo <- readRDS("basicInfo.RDS")
basicInfo
ggplot(data=lines_files,aes(x=files,y=lines,fill=files)) +
geom_bar(stat="identity") +
xlab("Text files provided") +
ylab("Number of lines") +
ggtitle("Number of lines per file")
library(ggplot2)
ggplot(data=lines_files,aes(x=files,y=lines,fill=files)) +
geom_bar(stat="identity") +
xlab("Text files provided") +
ylab("Number of lines") +
ggtitle("Number of lines per file")
basicInfo
ggplot(data=basicInfo,aes(x=FileName,y=nRows,fill=FileName)) +
+     geom_bar(stat="identity") +
+     xlab("Text files provided") +
+     ylab("Number of lines") +
+     ggtitle("Number of lines per file")
ggplot(data=basicInfo,aes(x=FileName,y=nRows,fill=FileName)) +
geom_bar(stat="identity") +
xlab("Text files provided") +
ylab("Number of lines") +
ggtitle("Number of lines per file")
qplot(x=FileName, y=nRows, fill=FileSize,
data=basicInfo, geom="bar", stat="identity",
position="dodge")
ggplot(data=FileName, aes(x=FileName, y=FileSize, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
ggplot(data=basicInfo, aes(x=FileName, y=FileSize, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
ggplot(data=basicInfo, aes(x=FileName, y=nRows, fill=FileSize)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
ggplot(data=basicInfo, aes(x=FileName, y=nRows + FileSize, fill=FileSize)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
ggplot(data=basicInfo, aes(x=FileName, y=nRows ~ FileSize, fill=FileSize)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
ggplot(data=basicInfo, aes(x=FileName, y=nRows , fill=FileSize)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
ggplot(data=basicInfo, aes(x=FileName, y=nRows , fill=FileName)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
ggplot(data=basicInfo, aes(x=FileName, y=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
ggplot(data=basicInfo, aes(x=FileName, y=nRows , fill=FileName)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
ggplot(data=basicInfo, aes(x=FileName, y=nRows , fill=FileName)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
+ xlab("File Name") +
ylab("Number of lines") +
ggtitle("Number of lines per file")
ggplot(data=basicInfo, aes(x=FileName, y=nRows , fill=FileName))
+ geom_bar(stat="identity", position=position_dodge(), colour="black")
+ xlab("File Name") + ylab("Number of lines") + ggtitle("Number of lines per file")
ggplot(data=basicInfo, aes(x=FileName, y=nRows , fill=FileName))
+ geom_bar(stat="identity", position=position_dodge(), colour="black")
+ xlab("File Name") + ylab("Number of lines") + ggtitle("Number of lines per file")
ggplot(data=basicInfo, aes(x=FileName, y=nRows , fill=FileName))
+ geom_bar(stat="identity", position=position_dodge(), colour="black")
ggplot(data=basicInfo, aes(x=FileName, y=nRows , fill=FileName))
ggplot(data=basicInfo, aes(x=FileName, y=FileSize, fill=)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
ggplot(data=basicInfo, aes(x=FileName, y=FileSize, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
ggplot(data=basicInfo, aes(x=FileName, y=FileSize, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +  xlab("Text files provided")
ggplot(data=basicInfo, aes(x=FileName, y=FileSize, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +  xlab("File Name")
+ ylab("Number of lines") + ggtitle("Number of lines per file")
ggplot(data=basicInfo, aes(x=FileName, y=FileSize, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +  xlab("File Name")
+ ylab("Number of lines") + ggtitle("Number of lines per file")
ggplot(data=basicInfo, aes(x=FileName, y=FileSize, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +  xlab("File Name")
+ ylab("Number of lines") + ggtitle("Number of lines per file")
ggplot(data=basicInfo, aes(x=FileName, y=FileSize, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +  xlab("File Name")
ggplot(data=basicInfo, aes(x=FileName, y=nRows, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +  xlab("File Name")
ggplot(data=basicInfo, aes(x=FileName, y=nRows, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +  xlab("File Name")
+ ylab("Number of lines")
ggplot(data=basicInfo, aes(x=FileName, y=nRows, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") + ylab("Number of lines") +  xlab("File Name")
ggplot(data=basicInfo, aes(x=FileName, y=nRows, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") + ylab("Number of lines") +  xlab("File Name")  +      ggtitle("Number of lines per file")
ggplot(data=basicInfo, aes(x=FileName, y=nRows, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") + ylab("Number of lines") +  xlab("File Name")
+ ggtitle("Number of lines per file")
ggplot(data=basicInfo, aes(x=FileName, y=nRows, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") + ylab("Number of lines") +  xlab("File Name")+ ggtitle("Number of lines per file")
ggplot(data=basicInfo, aes(x=FileName, y=nRows, fill=nRows)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") + ylab("Number of lines") +  xlab("File Name")+ ggtitle("Number of lines per file")
ggplot(data=basicInfo, aes(x=FileName, y=nRows, fill=nRows))
ggplot(data=basicInfo,aes(x=nRows,y=lines,fill=nRows)) +
geom_bar(stat="identity") +
xlab("Text files provided") +
ylab("Number of lines") +
ggtitle("Number of lines per file")
ggplot(data=basicInfo,aes(x=FileName,y=nRows,fill=nRows)) +
geom_bar(stat="identity") +
xlab("Text files provided") +
ylab("Number of lines") +
ggtitle("Number of lines per file")
ggplot(data=basicInfo, aes(x=FileName, y=nRows, fill=nRows)) +
geom_bar(data=basicInfo, stat="identity", position=position_dodge(), colour="black") + ylab("Number of lines") +  xlab("File Name")+ ggtitle("Number of lines per file")
dat <- data.frame(
time = factor(c("Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(14.89, 17.23)
)
basicInfo
class(basicInfo)
basicInfo$nRows <- as.numeric(basicInfo$nRows)
basicInfo <- readRDS
basicInfo <- readRDS("basicInfo.RDS")
View(basicInfo)
basicInfo
?multiplot
require(gridExtra)
basicInfo <- readRDS("basicInfo.RDS")
basicInfo$nRows <- as.numeric(basicInfo$nRows)
basicInfo
basicInfo <- readRDS("basicInfo.RDS")
basicInfo
basicInfo$nRows
as.numeric(basicInfo$nRows)
as.numeric(as.character(basicInfo$nRows))
basicInfo <- readRDS("basicInfo.RDS")
basicInfo
arquivos <- sapply(list.files("C:\\git\\capstone\\final\\en_US",full.names=T),
function(file) as.numeric(str_extract(system2("wc",c("-l",file),stdout=T),"[0-9]+")))
arquivosUS <- data.frame()
for (i in 1:length(arquivos)) {
df <- data.frame(arquivo=names(arquivos[i]),nlines=arquivos[i],seed=19061963,size=arquivos[i]/10)
arquivosUS <- rbind(arquivosUS,df)
df <- NULL
}
df
arquivosUS$nome <- list.files("C:\\git\\capstone\\final\\en_US")
arquivosUS$nome
blogsUS <- readLines(as.character(arquivosUS[1,"arquivo"]),encoding="UTF-8",skipNul=T)
str(blogsUS)
newsUS <- readLines(as.character(arquivosUS[2,"arquivo"]),encoding="UTF-8",skipNul=T)
twitterUS <- readLines(as.character(arquivosUS[3,"arquivo"]),encoding="UTF-8",skipNul=T)
newsUS <- readLines(as.character(arquivosUS[2,"arquivo"]),encoding="UTF-8",skipNul=T)
newsUS <- readLines(as.character(arquivosUS[2,"arquivo"]),skipNul=T)
word_stats <- data.frame(files=c(rep("blogsUS",length(blogsUS)),
rep("twitterUS",length(twitterUS)),
rep("newsUS",length(newsUS))),
wordcount=c(str_count(blogsUS,"\\w+"),
str_count(twitterUS,"\\w+"),
str_count(newsUS,"\\w+")))
boxplot(log(wordcount)~files,data=word_stats,
main="Statistics of number of words per text in file",
xlab="Files",
ylab="LOG(number of words per text)")
word_stats
con <- file("c:\\git\\capstone\\final\\en_US\\en_US.twitter.txt", "r")
con <- file(filePath, "r")
a<- readLines(con)
close(con)
rm(a)
dim(newsU)
dim(newsUS)
dim(blogsUS)
dim(blogsUS)
blogsUS[1]
blogsUS[1:4]
rm(con)
rm(df)
rm(i)
rm(v)
rm(v1)
rm(v2)
blogsUS[1]
table(blogsUS[1])
words.blogsUS <- sort(table(blogsUS),decreasing=TRUE)
con <- file("c:\\git\\capstone\\final\\en_US\\en_US.twitter.txt", "r")
a<- readLines(con)
close(con)
a <- iconv(a, from="UTF-8", to="latin1", sub=" ") #transforms  "I'm doing it!รฐY'ยฆ" to "I'm doing it!    "
df<-as.data.frame(a)
names(df) <- c("text")
myCorpus <-Corpus(VectorSource(df))
fmyCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, removePunctuation) # remove punctuation
myCorpus <- tm_map(myCorpus, removeNumbers) #remove numbers
removeURL <- function(x) gsub("http[[:alnum:]]*", "", x) # remove URLs
myCorpus <- tm_map(myCorpus, removeURL)
myCorpus <-Corpus(VectorSource(df))
library(tm)
myCorpus <-Corpus(VectorSource(df))
fmyCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, removePunctuation) # remove punctuation
myCorpus <- tm_map(myCorpus, removeNumbers) #remove numbers
removeURL <- function(x) gsub("http[[:alnum:]]*", "", x) # remove URLs
myCorpus <- tm_map(myCorpus, PlainTextDocument) #http://stackoverflow.com/questions/24191728/documenttermmatrix-error-on-corpus-argument
rm(fmyCorpus)
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
1BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 1, max = 1))
BigramTokenizer1 <- function(x) NGramTokenizer(x, Weka_control(min = 1, max = 1))
tdm <- TermDocumentMatrix(myCorpus, control = list(tokenize = BigramTokenizer1))
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 1, max = 1))
tdm <- TermDocumentMatrix(myCorpus, control = list(tokenize = BigramTokenizer))
library(RWeka)
tdm <- TermDocumentMatrix(myCorpus, control = list(tokenize = BigramTokenizer))
v<-c("en_US.blogs.txt","en_US.news.txt", "en_US.twitter.txt")
v<-c("en_US.blogs.txt","en_US.news.txt", "en_US.twitter.txt")
v1<-c("899289","1010242","2360148")
v2<-c("205","200","163")
v3 <- c("37272578","34309642", "30341028")
basicInfo<-data.frame(FileName=v,nRows=v1,FileSize=v2, nWords = v3)
saveRDS(basicInfo,"basicInfo.RDS")
basicInfo
basicInfo <- readRDS("basicInfo.RDS")
basicInfo
saveRDS(basicInfo,"basicInfo.RDS")
basicInfo <- readRDS("basicInfo.RDS")
basicInfo
37272578 + 34309642 + 30341028
basicInfo
ggplot(basicInfo, aes(x=FileName, y=as.numeric(as.character(basicInfo$nRows)), fill=FileName)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= as.numeric(as.character(basicInfo$nRows))))
par(mfrow=c(1,1))
ggplot(data=basicInfo, aes(x=FileName, y=as.numeric(as.character(basicInfo$nRows)), fill=nRows)) +
geom_bar(colour="black", stat="identity") +
guides(fill=FALSE) +
xlab("File Name") +
ylab("Number of lines") +
ggtitle("Number of lines per file") + geom_text(aes(label= as.numeric(as.character(basicInfo$nRows))))
ggplot(basicInfo, aes(x=FileName, y=as.numeric(as.character(basicInfo$nRows)), fill=FileName)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= as.numeric(as.character(basicInfo$nRows))))
par(mfrow=c(1,1))
ggplot(data=basicInfo, aes(x=FileName, y=as.numeric(as.character(basicInfo$nRows)), fill=nRows)) +
geom_bar(colour="black", stat="identity") +
guides(fill=FALSE) +
xlab("File Name") +
ylab("Number of lines") +
ggtitle("Number of lines per file") + geom_text(aes(label= as.numeric(as.character(basicInfo$nRows))))
ggplot(basicInfo, aes(x=FileName, y=as.numeric(as.character(basicInfo$nRows)), fill=FileName)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= as.numeric(as.character(basicInfo$nRows))))
p1 <- ggplot(data=basicInfo, aes(x=FileName, y=as.numeric(as.character(basicInfo$nRows)), fill=nRows)) +
geom_bar(colour="black", stat="identity") +
guides(fill=FALSE) +
xlab("File Name") +
ylab("Number of lines") +
ggtitle("Number of lines per file") + geom_text(aes(label= as.numeric(as.character(basicInfo$nRows))))
p2 <_ ggplot(basicInfo, aes(x=FileName, y=as.numeric(as.character(basicInfo$nRows)), fill=FileName)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= as.numeric(as.character(basicInfo$nRows))))
p1 <- ggplot(data=basicInfo, aes(x=FileName, y=as.numeric(as.character(basicInfo$nRows)), fill=nRows)) +
geom_bar(colour="black", stat="identity") +
guides(fill=FALSE) +
xlab("File Name") +
ylab("Number of lines") +
ggtitle("Number of lines per file") + geom_text(aes(label= as.numeric(as.character(basicInfo$nRows))))
p2 <- ggplot(basicInfo, aes(x=FileName, y=as.numeric(as.character(basicInfo$nRows)), fill=FileName)) +
geom_bar(stat="identity", color='black') +
xlab("Event type") + ylab("Fatality Score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(legend.position="none") + geom_text(aes(label= as.numeric(as.character(basicInfo$nRows))))
grid.newpage()
basicInfo
cleanData <- function(data) {
library(tm)
data <- tolower(data) # convert to lowercase
data <- removeNumbers(data) # remove numbers
pontuacao <- '[.,!:;?]|:-\\)|:-\\(|:\\)|:\\(|:D|=D|8\\)|:\\*|=\\*|:x|:X|:o|:O|:~\\(|T\\.T|Y\\.Y|S2|<3|:B|=B|=3|:3'
data <- gsub(pontuacao," END ",data) # substitute selected ponctuation (including smileys) with the word END
data <- gsub("$"," END",data) # make sure every line ends with an END
data <- gsub("\\b(\\w+)\\s+\\1\\b","\\1",data) # remove duplicate words in sequence (eg. that that)
data <- gsub("\\b(\\w+)\\s+\\1\\b","\\1",data) # remove duplicate words in sequence (eg. that that)
data <- gsub("\\b(\\w+)\\s+\\1\\b","\\1",data) # remove duplicate words in sequence (eg. that that)
data <- removePunctuation(data) # remove all other punctuation
data <- stripWhitespace(data) # remove excess white space
data <- gsub("^[[:space:]]","",data) # make sure lines doesn't begin with space
data <- gsub("[[:space:]]$","",data) # make sure lines doesn't end with space
}
blogsUS <- cleanData(blogsUS)
word_stats
head(word_stats)
boxplot(log(wordcount)~files,data=word_stats,
main="Statistics of number of words per text in file",
xlab="Files",
ylab="LOG(number of words per text)")
summary(word_stats$wordcount)
aggregate(dword_stats$wordcount,by=list(word_stats$files),FUN=sum)
aggregate(word_stats$wordcount,by=list(word_stats$files),FUN=sum)
basicInfo
# The Data
con <- file("en_US.twitter.txt", "r")
f<- readLines(con)
close(con)
f
table(f)
?stri_stats_general
dt_n1 <- readRDS("dt_n1.RDS")
setwd("C:\\git\\capstone\\2PredictionApp")
setwd("C:\\git\\capstone\\PredictionApp")
setwd("C:\\git\\capstone\\TextPredictionApp")
dt_n1 <- readRDS("dt_n1.RDS")
dt_n2 <- readRDS("dt_n2.RDS")
dt_n3 <- readRDS("dt_n3.RDS")
head(dt_n1)
dt_n1[][order(-freq)][1:3,]
dt_n1[][order(freq)][1:3,]
class(dt_n1)
heaqd(dt_n1)
head(dt_n1)
dt_n1 <- readRDS("dt_n1.RDS")
dt_n1[][order(-freq)][1:3,]
library(data.table)
dt_n1[][order(-freq)][1:3,]
dt_n1[][order(-freq)][1:10,]
listWords <- dt_n1[][order(-freq)][1:10,]
listWords
hist(listWords)
hist(listWords$freq)
hist(listWords$target)
barplot(listWords$target)
barplot(listWords$freq)
barplot(listWords$freq, names.arg=listWords$target)
barplot(listWords$freq, names.arg=listWords$target, main="Word Distribution on the training set")
barplot(listWords$freq, names.arg=listWords$target, main="Word Distribution on the training set", ylab="Count Word")
barplot(listWords$freq, names.arg=listWords$target, main="Word Distribution on the training set", ylab="Count Word", col="dark blue")
dt_n2 <- readRDS("dt_n2.RDS")
listWordsN2 <- dt_n2[][order(-freq)][1:10,]
listWords
listWordsN2
dt_n2
dt_n2[][order(-freq)][1:10,]
dt_n1
listWordsN2
c(listWordsN2$gram," ",c(listWordsN2$target)
)
c(as.numeric(as.character(listWordsN2$gram))," ",c(as.numeric(as.character(listWordsN2$target))
)
)
c(as.character(listWordsN2$gram)," ",c(as.character(listWordsN2$target))
)
dt_n2
listWordsN2
listWordsN2$gram
listWordsN2$gram
c(listWordsN2$gram," ",listWordsN2$target)
c(as.character(listWordsN2$gram)," ",as.character(listWordsN2$target))
listWordsN2$$foo<-c(as.character(listWordsN2$gram)," ",as.character(listWordsN2$target))
listWordsN2$foo<-c(as.character(listWordsN2$gram)," ",as.character(listWordsN2$target))
do.call(paste0, listWordsN2[c(1, 2)])
listWordsN2
listWordsN2[c(1, 2)
]
listWordsN2[c(1, 2)]
listWordsN2[,]
listWordsN2[,1:2]
listWordsN2[,c("gram")]
listWordsN2[,1:2]
listWordsN2[,c("A","B","E")]
listWordsN2[,c("gram","target")]
class(listWordsN2)
subset(listWordsN2, select=c("gram", "target")
)
subset(listWordsN2, select=c("gram", "target"))
do.call(paste0, subset(listWordsN2, select=c("gram", "target")))
do.call(paste0, subset(listWordsN2, select=c("gram"," ", "target")))
paste(listWordsN2$gram," ",listWordsN2$target)
listWordsN2$foo <- paste(listWordsN2$gram," ",listWordsN2$target)
listWordsN2
dt_n2 <- readRDS("dt_n2.RDS")
listWordsN2 <- dt_n2[][order(-freq)][1:3,]
listWordsN2$gram <- paste(listWordsN2$gram," ",listWordsN2$target)
dt_n2
listWordsN2
dt_n2 <- readRDS("dt_n2.RDS")
listWordsN2 <- dt_n2[][order(-freq)][1:3,]
listWordsN2
listWordsN2$rep <- paste(listWordsN2$gram," ",listWordsN2$target)
listWordsN2
dt_n2 <- readRDS("dt_n2.RDS")
listWordsN2 <- dt_n2[][order(-freq)][1:10,]
listWordsN2$rep <- paste(listWordsN2$gram," ",listWordsN2$target)
listWordsN2
x <- barplot(table(mtcars$cyl), xaxt="n")
labs <- paste(names(table(mtcars$cyl)), "cylinders")
text(cex=1, x=x-.25, y=-1.25, labs, xpd=TRUE, srt=45, pos=2)
dt_n2 <- readRDS("dt_n2.RDS")
listWordsN2 <- dt_n2[][order(-freq)][1:10,]
listWordsN2$rep <- paste(listWordsN2$gram," ",listWordsN2$target)
par(mar = c(7, 4, 2, 2) + 0.2)
end_point = 0.5 + nrow(listWordsN2) + nrow(listWordsN2)-1
barplot(listWordsN2$freq, main="Top 10 bigram Distribution on the training set", ylab="Count Word", col="dark blue", las=2, space=1)
text(seq(1.5,end_point,by=2), par("usr")[3]-0.25,
srt = 60, adj= 1, xpd = TRUE,
labels = paste(rownames(mtcars)), cex=0.65)
barplot(listWordsN2$freq, main="Top 10 bigram Distribution on the training set", ylab="Count Word", col="dark blue", las=2, space=1)
text(seq(1.5,end_point,by=2), par("usr")[3]-0.25,
srt = 60, adj= 1, xpd = TRUE,
labels = listWordsN2$gram, cex=0.65)
text(seq(1.5,end_point,by=2), par("usr")[3]-0.25,
srt = 60, adj= 1, xpd = TRUE,
labels = listWordsN2$rep, cex=0.65)
barplot(listWordsN2$freq, main="Top 10 bigram Distribution on the training set", ylab="Count Word", col="dark blue", las=2, space=1)
barplot(listWordsN2$freq, main="Top 10 bigram Distribution on the training set", ylab="Count Word", col="dark blue", las=2, space=1)
text(seq(1.5,end_point,by=2), par("usr")[3]-0.25,
srt = 60, adj= 1, xpd = TRUE,
labels = listWordsN2$rep, cex=0.65)
barplot(listWordsN2$freq, main="Top 10 bigram Distribution on the training set", ylab="Count Word", col="dark blue", las=2, space=1)
text(seq(1.5,end_point,by=2), par("usr")[3]-0.25,
srt = 60, adj= 1, xpd = TRUE,
labels = listWordsN2$rep, cex=0.65)
barplot(listWordsN2$freq, main="Top 10 bigram Distribution on the training set", ylab="Count Word", col="dark blue", las=2, space=1)
text(seq(1.5,end_point,by=2), par("usr")[3]-0.25,
srt = 60, adj= 1, xpd = TRUE,
labels = listWordsN2$rep, cex=1)
end_point
seq(1.5,end_point,by=2)
par(mar = c(7, 4, 2, 2) + 0.2)
end_point = 19.5
barplot(listWordsN3$freq, main="Top 10 3-gram Distribution on the training set", ylab="Count Word", col="dark blue",las=2)
text(seq(0.5,end_point,by=2), par("usr")[3]-0.25, srt = 60, adj= 1, xpd = TRUE, labels = listWordsN3$rep, cex=1)
dt_n3 <- readRDS("dt_n3.RDS")
listWordsN3 <- dt_n3[][order(-freq)][1:10,]
listWordsN3$rep <- paste(listWordsN3$gram," ",listWordsN3$targe
t)
dt_n3 <- readRDS("dt_n3.RDS")
listWordsN3 <- dt_n3[][order(-freq)][1:10,]
listWordsN3$rep <- paste(listWordsN3$gram," ",listWordsN3$target)
par(mar = c(7, 4, 2, 2) + 0.2)
end_point = 19.5
barplot(listWordsN3$freq, main="Top 10 3-gram Distribution on the training set", ylab="Count Word", col="dark blue",las=2)
text(seq(0.5,end_point,by=2), par("usr")[3]-0.25, srt = 60, adj= 1, xpd = TRUE, labels = listWordsN3$rep, cex=1)
par(mar = c(7, 4, 2, 2) + 0.2)
end_point = 19.5
barplot(listWordsN3$freq, main="Top 10 3-gram Distribution on the training set", ylab="Count Word", col="dark blue",las=2)
text(seq(0.5,end_point,by=1), par("usr")[3]-0.25, srt = 60, adj= 1, xpd = TRUE, labels = listWordsN3$rep, cex=1)
par(mar = c(7, 4, 2, 2) + 0.2)
end_point = 19.5
barplot(listWordsN3$freq, main="Top 10 3-gram Distribution on the training set", ylab="Count Word", col="dark blue",las=2)
text(seq(0.5,end_point,by=0.5), par("usr")[3]-0.25, srt = 60, adj= 1, xpd = TRUE, labels = listWordsN3$rep, cex=1)
par(mar = c(7, 4, 2, 2) + 0.2)
par("usr")
par(mar = c(7, 4, 2, 2) + 0.2)
end_point = 19.5
barplot(listWordsN3$freq, main="Top 10 3-gram Distribution on the training set", ylab="Count Word", col="dark blue",las=2)
text(seq(1.5,end_point,by=2), par("usr")[3]-0.25, srt = 60, adj= 1, xpd = TRUE, labels = listWordsN3$rep, cex=1)
par(mar = c(7, 4, 2, 2) + 0.2)
end_point = 19.5
barplot(listWordsN3$freq, main="Top 10 3-gram Distribution on the training set", ylab="Count Word", col="dark blue",las=2)
text(seq(1,end_point,by=2), par("usr")[3]-0.25, srt = 60, adj= 1, xpd = TRUE, labels = listWordsN3$rep, cex=1)
par(mar = c(7, 4, 2, 2) + 0.2)
end_point = 19.5
barplot(listWordsN3$freq, main="Top 10 3-gram Distribution on the training set", ylab="Count Word", col="dark blue",las=2)
text(seq(0.8,end_point,by=2), par("usr")[3]-0.25, srt = 60, adj= 1, xpd = TRUE, labels = listWordsN3$rep, cex=1)
par(mar = c(7, 4, 2, 2) + 0.2)
end_point = 19.5
barplot(listWordsN3$freq, main="Top 10 3-gram Distribution on the training set", ylab="Count Word", col="dark blue",las=2)
text(seq(0.6,end_point,by=2), par("usr")[3]-0.25, srt = 60, adj= 1, xpd = TRUE, labels = listWordsN3$rep, cex=1)
par(mar = c(7, 4, 2, 2) + 0.2)
end_point = 19.5
barplot(listWordsN3$freq, main="Top 10 3-gram Distribution on the training set", ylab="Count Word", col="dark blue",las=2)
text(seq(0.6,end_point,by=1), par("usr")[3]-0.25, srt = 60, adj= 1, xpd = TRUE, labels = listWordsN3$rep, cex=1)
