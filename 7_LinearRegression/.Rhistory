mtcars2
fit
fit <- lm(mtcars$mpg ~ mtcars$wt)
fit2 <- lm(mtcars2$mpg ~ mtcars2$wt)
fit
fit2
tbl2<-summary(fit2)$coefficients
View(tbl2)
mn<-tbl2[2,1]
std_err<-tbl2[2,2]
deg_fr<-fit2$df
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
p<-predict(fit,data.frame(mtcars$wt), interval="confidence")
View(p)
p2<-predict(fit2,data.frame(mtcars2$wt), interval="confidence")
p2
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
predict(fit2,data.frame(1), interval="confidence")
predict(fit2,1, interval="confidence")
new = data.frame( wt = (c(1)))
predict(fit2, newdata=new, interval="confidence")
predict(fit2, newdata=new, interval="prediction")
predict(fit, newdata=new, interval="prediction")
fit3 <- lm( mpg ~ wt, data = mtcars)
predict(fit3, interval ="prediction", newdata = new)
fit3
fit
predict(fit, interval ="prediction", newdata = new)
fit3
predict(fit3, interval ="prediction", newdata = new)
predict(fit3, interval ="confidence", newdata = new)
foo
foo <- read.csv("foo.csv")
fitfoo <- lm (Y ~ X, foo)
fooX <- foo$X
pfoo<-predict(fitfoo,data.frame(Xfoo), interval="confidence")
pfoo<-predict(fitfoo,data.frame(foox), interval="confidence")
foox
pfoo<-predict(fitfoo,data.frame(fooX), interval="confidence")
fit <- lm (Y ~ X, foo)
X <- foo$X
p<-predict(fit,data.frame(X), interval="confidence")
p
sumCoef<-summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2]
library(UsingR);
data(diamond)
y <- diamond$price;
x <- diamond$carat;
n <- length(y)
fit<-lm(y~x);
summary(fit)$coefficients
sumCoef<-summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2]
y
x
p <- predict(fit, data.frame(x), interval="confidence")
p
library(UsingR);
data(diamond)
y <- diamond$price;
x <- diamond$carat;
n <- length(y)
fit<-lm(y~x);
sumCoef<-summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2]
plot(x,y,frame=FALSE,xlab="Carat",ylab="Dollars",pch=21,col="black",bg="lightblue",cex=2)
abline(fit,lwd=2)
p<-predict(fit,data.frame(x), interval="confidence")
p
lines(X,p[,2],col="blue") #Lower confidence interval
lines(x,p[,2],col="blue") #Lower confidence interval
lines(X,p[,4],col="red")  #upper confidence interval
lines(x,p[,2],col="red")  #upper confidence interval
lines(x,p[,2],col="blue") #Lower confidence interval
lines(x,p[,3],col="red")  #upper confidence interval
cbind(x,p)
p<-predict(fit,data.frame(x), interval="confidence")
se1<-sigma*sqrt(1/n+(xVals-mean(x))^2/ssx)
sigma <- sqrt(sum(e^2) / (n-2))
e <- y – beta0 – beta1 * x #y – (beta1*x + beta0)
e <- y – beta0 – beta1 * x
e <- y - beta0 - beta1 * x
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) – beta1 * mean(x)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) – beta1 * mean(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
se1<-sigma*sqrt(1/n+(xVals-mean(x))^2/ssx)
ssx <- sum((x – mean(x))^2)
ssx <- sum((x – mean(x))^2)
ssx <- sum((x - mean(x))^2)
xVals<-seq(min(x),max(x),by=.01)
yVals<-beta0+beta1*xVals
se1<-sigma*sqrt(1/n+(xVals-mean(x))^2/ssx)
lines(xVals,yVals+2*se1)
lines(xVals,yVals-2*se1)
lines(xVals,yVals+2*se2)
se2<-sigma*sqrt(1+1/n+(xVals-mean(x))^2/ssx
)
lines(xVals,yVals+2*se2)
lines(xVals,yVals-2*se2)
fit2<-lm(y~I(x/2))
tbl2<-summary(fit2)$coefficients
mn<-tbl2[2,1]      #mean is the estimated slope
std_err<-tbl2[2,2] #standard error
deg_fr<-fit2$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
x<-mtcars$wt
y<-mtcars$mpg
x<-mtcars$wt
y<-mtcars$mpg
fit2<-lm(y~I(x/2))
tbl2<-summary(fit2)$coefficients
mn<-tbl2[2,1]      #mean is the estimated slope
std_err<-tbl2[2,2] #standard error
deg_fr<-fit2$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
x<-mtcars$wt/2
y<-mtcars$mpg
fit2<-lm(y~x)
tbl2<-summary(fit2)$coefficients
mn<-tbl2[2,1]      #mean is the estimated slope
std_err<-tbl2[2,2] #standard error
deg_fr<-fit2$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
x<-mtcars$wt
y<-mtcars$mpg
fit2<-lm(y~x)
tbl2<-summary(fit2)$coefficients
mn<-tbl2[2,1]      #mean is the estimated slope
std_err<-tbl2[2,2] #standard error
deg_fr<-fit2$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
?predict
fit$df
qt(.975, df = fit$df)
mtcars
fit
summary(fit)
mtcars
write.table(mtcars, "cars.csv")
write.table(mtcars, "cars.csv", sep=",")
swirl()
lm (Fertility ~ ., data=swiss)
lm (Fertility ~ . , data=swiss)
all <- lm (Fertility ~ ., data=swiss)
summary(all)
lm (Fertility ~ aggriculture, data=swiss)
lm (Fertility ~ Agriculture, data=swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ex <- swiss$Examination + swiss$Catholic
ec <- swiss$Examination+swiss$Catholic
efit <- lm (Fertility ~ . +ec, swiss)
efit
efit
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays,15)
sa
sA
summary(sA[,2])
sA[,2]
sA
summary(InsectSprays[,2])
sapply(summary)
sapply(summary[,1])
sapply(summary[,1], fun=sum)
sapply(summary[,1], FUN=sum)
sapply(summary[,1], FUN=class)
sapply(summary, FUN=class)
sapply(InsectSprays,class)
fit <- lm(count ~ spray)
fit <- lm(count ~ spray, data=InsectSprays)
fit$coef
summary(fit)$coef
est<- (summary(fit)$coef) [,1]
est<- (summary(fit)$coef)[,1]
est<- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
coef(nfit)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, spray2)
fit2 <- lm(Count ~ spray, spray2)
fit2 <- lm(Count ~ spray, InsectSprays)
fit2 <- lm(count ~ spray, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays
)
summary(fit2)$coef
mean(sC)
fit$coef[3]
fit$coef[2]
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year)
lmF <- lm(Numeric ~ Year)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year, hunger)
lmF <- lm(Numeric ~ Year, hunger)
lmF <-lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <-lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year, Sex, Sex*Year, hunger)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
mtcars
fit <- lm(mpg ~ cyl + wt)
fit <- lm(mpg ~ cyl + wt, mtcars)
fit
summary(fit)
View(mtcars2)
mtcars$cyl
as.factor(mtcars$cyl)
cars <- mtcars
cars$cylfact <- as.factor(cars$cyl)
fit <- lm(mpg ~ cylfact + wt, cars)
fit
summary(fit)
fit2 <- lm(mpg ~ cylfact, cars)
summary(fit)
summary(fit2)
require(datasets)
data(swiss)
?swiss
head(swiss)
require(GGally)
library(GGally)
install.packages("GGally")
library(GGally)
require(ggplot2)
ggpairs(mtcars, lower = list(continuous = "smooth"), params = c(method = "loess"))
n <- 100;
x2 <- 1:n;
x2
x1 <- .01 *x2 + runif(n, -.1, .1);
plot(x1)
y = -x1 + x2 + rnorm(n, sd = .01)
y
plot(y)
summary(lm(y~x1))$coef
summary(lm(y~x1+x2))$coef
?mtcars
scatterplot3d(wt,disp,mpg, main="3D Scatterplot")
library(scatterplot3d)
attach(mtcars)
install.packages("scatterplot3d")
library(scatterplot3d)
attach(mtcars)
scatterplot3d(wt,disp,mpg, main="3D Scatterplot")
library(scatterplot3d)
attach(mtcars)
s3d <-scatterplot3d(wt,disp,mpg, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot")
fit <- lm(mpg ~ wt+disp)
s3d$plane3d(fit)
library(rgl)
plot3d(wt, disp, mpg, col="red", size=3)
install.packages(rgl)
install.packages("rgl")
library(rgl)
plot3d(wt, disp, mpg, col="red", size=3)
lm(mpg ~ ., mtcars)
?mtcars
cars <- mtcars
View(cars)
getpwd()
getwd()
setwd("c:\\git\\linearregression\\")
mtcars$am <- as.factor(mtcars$am)
cars$am <- as.factor(cars$am)
cars <- mtcars
View(cars)
mtcars
cars <- mtcars
cars$am <- as.factor(cars$am)
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, outpch = 19)
boxplot(cars$mpg ~ cars$am, data = cars, outpch = 19)
levels(cars$am) <-c("Auto", "manual")
cars
levels(cars$am) <-c("Auto", "Manual")
cars
?cars
?mtcars
plot(cars$am, cars$mpg)
?step
lm(mpg, am, cars)
lm(mpg, am, data= cars)
lm(mpg ~ am, data= cars)
summary(lm(mpg ~ am, data= cars))$coef
summary(lm(mpg ~ am, data= mtcars))$coef
plot(cars$am, cars$mpg)
?mtcars
cars[,am="Auto"]
cars[,cars$am="Auto"]
cars$am="Auto"
cars <- mtcars
cars$am <- as.factor(cars$am)
levels(cars$am) <-c("Auto", "Manual")
cars$am=="Auto"
cars[,cars$am=="Auto"]
cars[,cars$am == "Auto"]
cars$am == "Auto"
cars[cars$am == "Auto",]
cars[cars$am == "Auto",]$mpg
mean(cars[cars$am == "Auto",]$mpg)
mean(cars[cars$am == "Auto",]$mpg) mean(cars[cars$am == "Auto",]$mpg)
mean(cars[cars$am == "Auto",]$mpg) mean(cars[cars$am == "Auto",]$mpg)
mean(cars[cars$am == "Auto",]$mpg)
mean(cars[cars$am == "Manual",]$mpg)
mean(cars[cars$am == "Auto",]$mpg) - mean(cars[cars$am == "Auto",]$mpg)
mean(cars[cars$am == "Manual",]$mpg) - mean(cars[cars$am == "Auto",]$mpg)
sort(cor(mtcars)[1,])
summary(lm(mpg ~ am, data= cars))$coef
summary(lm(mpg ~ am, data= cars))
names(lm(mpg ~ am, data= cars))
summary(lm(mpg ~ am, data= cars))$df.residual
fit <- lm(mpg ~ am, data= cars)
fit$coef
fit
summary(fit)
names(fit)
fit$residuals
fit$df.residual
fit$qr
names(fit)
fit$effects
fit$rank
fit$model
names(fit)
fit$terms
fit$call
fit$xlevels
fit$contrasts
fit$df.residual
fit$qr
names(fit)
fit$R
fit
fit
summary(fit)
names(summary(fit))
summary(fit)
lm(mpg ~ ., mtcars)
lm(mpg ~ ., mtcars)$coef
summary(lm(mpg ~ ., mtcars))
summary(lm(mpg ~ qsec + wt, mtcars))
summary(lm(mpg ~ qsec * wt, mtcars))
summary(lm(mpg ~ qsec + wt, mtcars))
plot(cars$am, cars$mpg)
abline(fit)
plot(mtcars$am, mtcars$mpg, main = '1 Variable Regression: MPG vs Trans')
abline(fit_1var)
plot(mtcars$am, mtcars$mpg)
abline(fit_1var)
plot(mtcars$am, mtcars$mpg)
abline(fit)
?glm
step_fit <- glm(mpg ~ as.factor(am) + as.factor(cyl) + as.factor(gear) + disp + hp + drat + wt, data = mtcars)
model_fit <- stepAIC(step_fit, direction = 'both'); model_fit$anova
t.test(cars[cars$am == "Manual",]$mpg, cars[cars$am == "Auto",]$mpg)
plot(cars$am, cars$mpg)
t.test(cars[cars$am == "Auto",]$mpg, cars[cars$am == "Manual",]$mpg)
fitall <- <- lm(mpg ~ ., data=cars)
fitall <- lm(mpg ~ ., data=cars)
fitall
?mtcars
cars$ cyl <- as.factor(cyl)
cars$ gear <- as.factor(gear)
cars$ carb <- as.factor(carb)
fitall
fitall <- lm(mpg ~ ., data=cars)
fitall
cars <- mtcars
cars$am <- as.factor(cars$am)
levels(cars$am) <-c("Auto", "Manual")
fit <- lm(mpg ~ am, data= cars)
fitall <- lm(mpg ~ ., data=cars)
fitall
?step
step(fitall, trace=0)
summary(step(fitall, trace=0))
step(fitall)
step(fitall, trace=0)
fitall$coef
fitall
summary(fitall)
names(summary(fitall))
names(summary(fitall))$call
summary(fitall)$call
summary(fitall)$terms
names(summary(fitall))$call
names(summary(fitall))
summary(fitall)$aliased
summary(fitall)$sigma
summary(fitall)$df
summary(fitall)$coef
summary(fitall)$coef[,1]
summary(fitall)$coef[,4]
arrange
summary(fitall)$coef[,4]
class(summary(fitall)$coef[,4])
foo<-summary(fitall)$coef[,4]
foo
class(summary(fitall)$coef[,4])
summary(fitall)$coef[,4]
goodfit<- step(fitall, trace=0)
goodfit
summary(goodfit)
plot(goodfit)
par(mfrow = c(2,2))
plot(model.best)
par(mfrow = c(2,2))
plot(goodfit)
?mtcars
cor(mtcars)
class(cor(mtcars))
mat <- matrix(NA, nrow=5, ncol=3)
mat
outer(1:nrow(mat), 1:ncol(mat) , FUN="*")
mat<-cor(mtcars)
mat
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) log(r+c) )
mat<-cor(mtcars)
?oter
?outer
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) mat[r,c] )
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) r )
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) r,c )
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) mat[r,c] )
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) 1 )
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) 1 )
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) r)
mat
apply(mat, function(x) x/2 )
apply(mat, 1:2, function(x) x/2 )
?apply
apply(mat, 1:2, function(x) if(x>0.5) then x else 0 )
apply(mat, 1:2, function(x) if(x>0.5) {x} else {0} )
apply(mat, 1:2, function(x) if(x>0.5) {x} else {""} )
apply(mat, 1:2, function(x) if(x>0.5) {x} else {0} )
apply(mat, 1:2, function(x) if(x>0.5 or x<0.5) {x} else {0} )
apply(mat, 1:2, function(x) if(x>0.5 || x<0.5) {x} else {0} )
apply(mat, 1:2, function(x) if(x<0.5) {x} else {0} )
apply(mat, 1:2, function(x) if(x>0 & x>0.5) {x} else {0} )
apply(mat, 1:2, function(x) if(x>0.8 || X< -0.8) {x} else {0} )
apply(mat, 1:2, function(x) if(x>0.8 || x < -0.8) {x} else {0} )
summary(goodfit)
apply(mat, 1:2, function(x) if(x>0.8 || x < -0.8) {x} else {0} )
mat
mat<-cor(cars)
mat<-cor(mtcars)
apply(mat, 1:2, function(x) if(x>0.8 || x < -0.8) {x} else {0} )
plot(wt, mpg, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
abline(lm(mpg~wt), col="red") # regression line (y~x)
scatterplot(mpg ~ am| cyl, data=mtcars,       xlab="Weight of Car", ylab="Miles Per Gallon",    main="Enhanced Scatter Plot",    labels=row.names(mtcars))
?scatterplot
??scatterplot
library(scatterplot3d)
install.packages("scatterplot3d")
scatterplot(mpg ~ am| cyl, data=mtcars,       xlab="Weight of Car", ylab="Miles Per Gallon",    main="Enhanced Scatter Plot",    labels=row.names(mtcars))
?scatterplot
scatterplot
pairs(~mpg+disp+drat+wt,data=mtcars,
main="Simple Scatterplot Matrix")
summary(goodfit)
pairs(~mpg+wt+qsec+am,data=mtcars, main="Simple Scatterplot Matrix")
scatterplot.matrix(~mpg+wt+qsec+am, data=mtcars, main="Three Cylinder Options")
??scatterplot.matrix
library(car)
install.packages(car)
goodfit
plot(cars$am, cars$mpg)
plot(mtcars$am, mtcars$mpg)
?mtcars
par(mfrow = c(1,2))
plot(cars$am, cars$mpg)
plot(mtcars$am, mtcars$mpg)
abline(fit)
plot(mtcars$am, mtcars$mpg, xlabel)
plot(mtcars$am, mtcars$mpg, xlabel="a")
summary(fitall)$coef[,4]
summary(fitall)$coef
fitall <- lm(mpg ~ ., data=cars)
summary(fitall)$coef
par(mfrow = c(2,2))
plot(model.best)
par(mfrow = c(2,2))
plot(goodmodel)
par(mfrow = c(2,2))
plot(goodfit)
gootfit
goodfit
goodfit
summary(goodfit)
